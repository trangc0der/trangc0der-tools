#!/bin/bash

# K·ªãch b·∫£n ƒêa Ch·ª©c NƒÉng Qu·∫£n L√Ω Docker cho AlmaLinux 8.10
# Phi√™n b·∫£n: 1.1 (H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ)

# --- BI·∫æN NG√îN NG·ªÆ TO√ÄN C·ª§C ---
SCRIPT_LANG="en" # M·∫∑c ƒë·ªãnh l√† Ti·∫øng Anh

# --- ƒê·ªäNH NGHƒ®A CHU·ªñI VƒÇN B·∫¢N (TI·∫æNG ANH) ---
EN_ACCESS_DENIED="ERROR: This script must be run with root or sudo privileges."
EN_PROMPT_SUDO_RERUN="Please try again with: sudo \$0"
EN_LANG_CHOICE_PROMPT="Enter your choice (1-2): "
EN_LANG_INVALID_CHOICE="Invalid choice, defaulting to English."

EN_MENU_HEADER="     üìú DOCKER MANAGEMENT MENU (ALMALINUX 8.10) üìú     "
EN_MENU_OPT_INSTALL_DOCKER="1. Install Docker Engine"
EN_MENU_OPT_UNINSTALL_DOCKER="2. Uninstall Docker Engine"
EN_MENU_DOCKER_SERVICE_SUBHEADER="Docker Service:"
EN_MENU_OPT_START_SERVICE="3. Start Docker Service"
EN_MENU_OPT_STOP_SERVICE="4. Stop Docker Service"
EN_MENU_OPT_RESTART_SERVICE="5. Restart Docker Service"
EN_MENU_OPT_STATUS_SERVICE="6. Check Docker Service Status"
EN_MENU_IMG_CONT_SUBHEADER="Image & Container Management:"
EN_MENU_OPT_LIST_IMAGES="7. List Docker Images"
EN_MENU_OPT_LIST_CONTAINERS="8. List Docker Containers (All)"
EN_MENU_OPT_REMOVE_IMAGE="9. Remove a Docker Image"
EN_MENU_OPT_REMOVE_CONTAINER="10. Remove a Docker Container"
EN_MENU_OPT_VIEW_LOGS="11. View Logs of a Container"
EN_MENU_OPT_PULL_IMAGE="12. Pull an Image from Docker Hub"
EN_MENU_UTIL_MAINT_SUBHEADER="Utilities & Maintenance:"
EN_MENU_OPT_PRUNE_SYSTEM="13. Prune Docker System (Clean unused objects)"
EN_MENU_OPT_ADD_USER_GROUP="14. Add current user to 'docker' group"
EN_MENU_OPT_EXIT="0. Exit"
EN_PROMPT_ENTER_CHOICE_MENU="Please select an option [0-14]: "
EN_ERR_INVALID_OPTION="‚ö†Ô∏è  Invalid option. Please try again."
EN_MSG_PRESS_ENTER_TO_CONTINUE="Press Enter to continue..."
EN_MSG_EXITING="üëã  Exiting!"

EN_MSG_DOCKER_NOT_INSTALLED_CHOOSE_INSTALL="‚ö†Ô∏è Docker is not installed. Please select 'Install Docker Engine' first."
EN_INFO_INSTALLING_DOCKER="üîµ Proceeding with Docker Engine installation..."
EN_MSG_DOCKER_ALREADY_INSTALLED="‚úÖ Docker is already installed. Version:" # Append version
EN_PROMPT_REINSTALL_CONFIRM="Do you want to reinstall? (y/N): "
EN_INFO_UNINSTALLING_OLD_VERSIONS="   Uninstalling old versions (if any)..."
EN_INFO_INSTALLING_DEPS_REPO="   Installing necessary packages and setting up Docker repository..."
EN_INFO_INSTALLING_DOCKER_ENGINE="   Installing Docker Engine, CLI, Containerd and plugins..."
EN_MSG_DOCKER_INSTALL_SUCCESS="‚úÖ Docker Engine installed successfully."
EN_MSG_DOCKER_SERVICE_STARTED_ENABLED="‚úÖ Docker service has been started and enabled."
EN_INFO_ADD_USER_TO_GROUP_POST_INSTALL="   NOTE: To run 'docker' commands without 'sudo', select the 'Add current user to docker group' option."
EN_ERR_DOCKER_INSTALL_FAILED="‚ùå Error during Docker installation."

EN_PROMPT_UNINSTALL_CONFIRM="‚ö†Ô∏è  ARE YOU SURE YOU WANT TO COMPLETELY UNINSTALL DOCKER? (this includes images, containers, volumes) (y/N): "
EN_INFO_UNINSTALLING_DOCKER="üîµ Uninstalling Docker..."
EN_MSG_UNINSTALL_COMPLETE="‚úÖ Docker has been completely uninstalled."
EN_MSG_UNINSTALL_CANCELLED="‚ÑπÔ∏è  Docker uninstallation cancelled."

EN_INFO_STARTING_DOCKER="üîµ Starting Docker service..."
EN_MSG_DOCKER_SERVICE_STARTED="‚úÖ Docker service has been started."
EN_ERR_STARTING_DOCKER="‚ùå Error starting Docker service."
EN_INFO_STOPPING_DOCKER="üîµ Stopping Docker service..."
EN_MSG_DOCKER_SERVICE_STOPPED="‚úÖ Docker service has been stopped."
EN_ERR_STOPPING_DOCKER="‚ùå Error stopping Docker service."
EN_INFO_RESTARTING_DOCKER="üîµ Restarting Docker service..."
EN_MSG_DOCKER_SERVICE_RESTARTED="‚úÖ Docker service has been restarted."
EN_ERR_RESTARTING_DOCKER="‚ùå Error restarting Docker service."
EN_INFO_DOCKER_SERVICE_STATUS="üîµ Docker service status:"

EN_INFO_LISTING_IMAGES="üîµ Docker Images List:"
EN_INFO_LISTING_CONTAINERS="üîµ Docker Containers List (including stopped):"
EN_PROMPT_IMAGE_ID_TO_REMOVE="Enter ID or Name of the Image to remove: "
EN_ERR_IMAGE_ID_EMPTY="‚ö†Ô∏è Image ID/Name cannot be empty."
EN_PROMPT_CONTAINER_ID_TO_REMOVE="Enter ID or Name of the Container to remove: "
EN_ERR_CONTAINER_ID_EMPTY="‚ö†Ô∏è Container ID/Name cannot be empty."

EN_WARN_PRUNE_SYSTEM="‚ö†Ô∏è  WARNING: This action will remove ALL unused Docker objects:"
EN_INFO_PRUNE_CONTAINERS="   - All stopped containers."
EN_INFO_PRUNE_NETWORKS="   - All networks not used by at least one container."
EN_INFO_PRUNE_IMAGES="   - All dangling images (and potentially all unused images if -a is used)."
EN_INFO_PRUNE_CACHE="   - All build cache."
EN_PROMPT_PRUNE_CONFIRM="Are you sure you want to proceed with pruning the Docker system? (y/N): "
EN_INFO_PRUNING_SYSTEM="üîµ Pruning Docker system..."
EN_MSG_PRUNE_COMPLETE="‚úÖ Docker system has been pruned."
EN_MSG_PRUNE_CANCELLED="‚ÑπÔ∏è  Pruning operation cancelled."

EN_ERR_CANNOT_ADD_ROOT_USER="‚ö†Ô∏è Cannot add 'root' user or unidentified user to docker group this way."
EN_INFO_ADD_ROOT_MANUALLY="   If you are running the script as root, please log in as a regular user and run this option again,"
EN_INFO_ADD_ROOT_MANUALLY_CMD="   or perform manually: sudo usermod -aG docker <your_username>"
EN_MSG_USER_ALREADY_IN_GROUP="‚úÖ User '%s' is already in the 'docker' group." # %s will be username
EN_INFO_ADDING_USER_TO_GROUP="üîµ Adding user '%s' to 'docker' group..." # %s will be username
EN_MSG_USER_ADDED_TO_GROUP="‚úÖ User '%s' has been added to the 'docker' group." # %s will be username
EN_INFO_LOGOUT_REQUIRED="   NOTE: You need to LOG OUT and LOG BACK IN for the changes to take effect,"
EN_INFO_NEWGRP_OPTION="   or run 'newgrp docker' in your current terminal session."
EN_ERR_ADDING_USER_TO_GROUP="‚ùå Error adding user '%s' to 'docker' group." # %s will be username

EN_PROMPT_CONTAINER_ID_FOR_LOGS="Enter ID or Name of the Container to view logs: "
EN_INFO_VIEWING_LOGS="üîµ Logs for container '%s' (Press Ctrl+C to exit):" # %s will be container_id
EN_PROMPT_IMAGE_TO_PULL="Enter the image name to pull (e.g., ubuntu:latest or nginx): "
EN_ERR_IMAGE_NAME_EMPTY="‚ö†Ô∏è Image name cannot be empty."
EN_INFO_PULLING_IMAGE="üîµ Pulling image '%s'..." # %s will be image_name


# --- ƒê·ªäNH NGHƒ®A CHU·ªñI VƒÇN B·∫¢N (TI·∫æNG VI·ªÜT) ---
VI_ACCESS_DENIED="‚ö†Ô∏è  L·ªñI: K·ªãch b·∫£n n√†y c·∫ßn ƒë∆∞·ª£c ch·∫°y v·ªõi quy·ªÅn root ho·∫∑c sudo."
VI_PROMPT_SUDO_RERUN="Vui l√≤ng ch·∫°y l·∫°i v·ªõi l·ªánh: sudo \$0"
VI_LANG_CHOICE_PROMPT="Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1-2): "
VI_LANG_INVALID_CHOICE="L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, m·∫∑c ƒë·ªãnh Ti·∫øng Anh."

VI_MENU_HEADER="     üìú MENU QU·∫¢N L√ù DOCKER (ALMALINUX 8.10) üìú     "
VI_MENU_OPT_INSTALL_DOCKER="1. C√†i ƒë·∫∑t Docker Engine"
VI_MENU_OPT_UNINSTALL_DOCKER="2. G·ª° c√†i ƒë·∫∑t Docker Engine"
VI_MENU_DOCKER_SERVICE_SUBHEADER="D·ªãch v·ª• Docker:"
VI_MENU_OPT_START_SERVICE="3. Kh·ªüi ƒë·ªông Docker Service"
VI_MENU_OPT_STOP_SERVICE="4. D·ª´ng Docker Service"
VI_MENU_OPT_RESTART_SERVICE="5. Kh·ªüi ƒë·ªông l·∫°i Docker Service"
VI_MENU_OPT_STATUS_SERVICE="6. Ki·ªÉm tra tr·∫°ng th√°i Docker Service"
VI_MENU_IMG_CONT_SUBHEADER="Qu·∫£n l√Ω Images & Containers:"
VI_MENU_OPT_LIST_IMAGES="7. Li·ªát k√™ Docker Images"
VI_MENU_OPT_LIST_CONTAINERS="8. Li·ªát k√™ Docker Containers (T·∫•t c·∫£)"
VI_MENU_OPT_REMOVE_IMAGE="9. X√≥a m·ªôt Docker Image"
VI_MENU_OPT_REMOVE_CONTAINER="10. X√≥a m·ªôt Docker Container"
VI_MENU_OPT_VIEW_LOGS="11. Xem log c·ªßa m·ªôt Container"
VI_MENU_OPT_PULL_IMAGE="12. Pull m·ªôt Image t·ª´ Docker Hub"
VI_MENU_UTIL_MAINT_SUBHEADER="Ti·ªán √≠ch & B·∫£o tr√¨:"
VI_MENU_OPT_PRUNE_SYSTEM="13. D·ªçn d·∫πp h·ªá th·ªëng Docker (Prune)"
VI_MENU_OPT_ADD_USER_GROUP="14. Th√™m ng∆∞·ªùi d√πng hi·ªán t·∫°i v√†o nh√≥m 'docker'"
VI_MENU_OPT_EXIT="0. Tho√°t"
VI_PROMPT_ENTER_CHOICE_MENU="Vui l√≤ng ch·ªçn m·ªôt t√πy ch·ªçn [0-14]: "
VI_ERR_INVALID_OPTION="‚ö†Ô∏è  L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i."
VI_MSG_PRESS_ENTER_TO_CONTINUE="Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c..."
VI_MSG_EXITING="üëã  T·∫°m bi·ªát!"

VI_MSG_DOCKER_NOT_INSTALLED_CHOOSE_INSTALL="‚ö†Ô∏è Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng ch·ªçn t√πy ch·ªçn 'C√†i ƒë·∫∑t Docker Engine' tr∆∞·ªõc."
VI_INFO_INSTALLING_DOCKER="üîµ ƒêang ti·∫øn h√†nh c√†i ƒë·∫∑t Docker Engine..."
VI_MSG_DOCKER_ALREADY_INSTALLED="‚úÖ Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t. Phi√™n b·∫£n:" # Append version
VI_PROMPT_REINSTALL_CONFIRM="B·∫°n c√≥ mu·ªën c√†i ƒë·∫∑t l·∫°i kh√¥ng? (y/N): "
VI_INFO_UNINSTALLING_OLD_VERSIONS="   G·ª° c√†i ƒë·∫∑t c√°c phi√™n b·∫£n c≈© (n·∫øu c√≥)..."
VI_INFO_INSTALLING_DEPS_REPO="   C√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt v√† thi·∫øt l·∫≠p kho l∆∞u tr·ªØ Docker..."
VI_INFO_INSTALLING_DOCKER_ENGINE="   C√†i ƒë·∫∑t Docker Engine, CLI, Containerd v√† c√°c plugin..."
VI_MSG_DOCKER_INSTALL_SUCCESS="‚úÖ Docker Engine ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng."
VI_MSG_DOCKER_SERVICE_STARTED_ENABLED="‚úÖ Docker service ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông v√† k√≠ch ho·∫°t."
VI_INFO_ADD_USER_TO_GROUP_POST_INSTALL="   L∆ØU √ù: ƒê·ªÉ ch·∫°y l·ªánh 'docker' m√† kh√¥ng c·∫ßn 'sudo', h√£y ch·ªçn t√πy ch·ªçn 'Th√™m ng∆∞·ªùi d√πng hi·ªán t·∫°i v√†o nh√≥m docker'."
VI_ERR_DOCKER_INSTALL_FAILED="‚ùå L·ªói trong qu√° tr√¨nh c√†i ƒë·∫∑t Docker."

VI_PROMPT_UNINSTALL_CONFIRM="‚ö†Ô∏è  B·∫†N C√ì CH·∫ÆC CH·∫ÆN MU·ªêN G·ª† C√ÄI ƒê·∫∂T HO√ÄN TO√ÄN DOCKER KH√îNG? (bao g·ªìm c·∫£ images, containers, volumes) (y/N): "
VI_INFO_UNINSTALLING_DOCKER="üîµ ƒêang g·ª° c√†i ƒë·∫∑t Docker..."
VI_MSG_UNINSTALL_COMPLETE="‚úÖ Docker ƒë√£ ƒë∆∞·ª£c g·ª° c√†i ƒë·∫∑t ho√†n to√†n."
VI_MSG_UNINSTALL_CANCELLED="‚ÑπÔ∏è  ƒê√£ h·ªßy thao t√°c g·ª° c√†i ƒë·∫∑t Docker."

VI_INFO_STARTING_DOCKER="üîµ ƒêang kh·ªüi ƒë·ªông Docker service..."
VI_MSG_DOCKER_SERVICE_STARTED="‚úÖ Docker service ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông."
VI_ERR_STARTING_DOCKER="‚ùå L·ªói khi kh·ªüi ƒë·ªông Docker service."
VI_INFO_STOPPING_DOCKER="üîµ ƒêang d·ª´ng Docker service..."
VI_MSG_DOCKER_SERVICE_STOPPED="‚úÖ Docker service ƒë√£ ƒë∆∞·ª£c d·ª´ng."
VI_ERR_STOPPING_DOCKER="‚ùå L·ªói khi d·ª´ng Docker service."
VI_INFO_RESTARTING_DOCKER="üîµ ƒêang kh·ªüi ƒë·ªông l·∫°i Docker service..."
VI_MSG_DOCKER_SERVICE_RESTARTED="‚úÖ Docker service ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i."
VI_ERR_RESTARTING_DOCKER="‚ùå L·ªói khi kh·ªüi ƒë·ªông l·∫°i Docker service."
VI_INFO_DOCKER_SERVICE_STATUS="üîµ Tr·∫°ng th√°i Docker service:"

VI_INFO_LISTING_IMAGES="üîµ Danh s√°ch Docker Images:"
VI_INFO_LISTING_CONTAINERS="üîµ Danh s√°ch Docker Containers (bao g·ªìm c·∫£ ƒë√£ d·ª´ng):"
VI_PROMPT_IMAGE_ID_TO_REMOVE="Nh·∫≠p ID ho·∫∑c T√™n c·ªßa Image c·∫ßn x√≥a: "
VI_ERR_IMAGE_ID_EMPTY="‚ö†Ô∏è ID/T√™n Image kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."
VI_PROMPT_CONTAINER_ID_TO_REMOVE="Nh·∫≠p ID ho·∫∑c T√™n c·ªßa Container c·∫ßn x√≥a: "
VI_ERR_CONTAINER_ID_EMPTY="‚ö†Ô∏è ID/T√™n Container kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."

VI_WARN_PRUNE_SYSTEM="‚ö†Ô∏è  C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω x√≥a T·∫§T C·∫¢ c√°c ƒë·ªëi t∆∞·ª£ng Docker kh√¥ng s·ª≠ d·ª•ng:"
VI_INFO_PRUNE_CONTAINERS="   - T·∫•t c·∫£ c√°c container ƒë√£ d·ª´ng."
VI_INFO_PRUNE_NETWORKS="   - T·∫•t c·∫£ c√°c network kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi √≠t nh·∫•t m·ªôt container."
VI_INFO_PRUNE_IMAGES="   - T·∫•t c·∫£ c√°c image kh√¥ng c√≥ t√™n v√† kh√¥ng ƒë∆∞·ª£c tham chi·∫øu b·ªüi container n√†o (dangling images)."
VI_INFO_PRUNE_CACHE="   - T·∫•t c·∫£ build cache."
VI_PROMPT_PRUNE_CONFIRM="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c d·ªçn d·∫πp h·ªá th·ªëng Docker kh√¥ng? (y/N): "
VI_INFO_PRUNING_SYSTEM="üîµ ƒêang d·ªçn d·∫πp h·ªá th·ªëng Docker..."
VI_MSG_PRUNE_COMPLETE="‚úÖ H·ªá th·ªëng Docker ƒë√£ ƒë∆∞·ª£c d·ªçn d·∫πp."
VI_MSG_PRUNE_CANCELLED="‚ÑπÔ∏è  ƒê√£ h·ªßy thao t√°c d·ªçn d·∫πp."

VI_ERR_CANNOT_ADD_ROOT_USER="‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m ng∆∞·ªùi d√πng 'root' ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh v√†o nh√≥m docker theo c√°ch n√†y."
VI_INFO_ADD_ROOT_MANUALLY="   N·∫øu b·∫°n ƒëang ch·∫°y script v·ªõi user root, h√£y ƒëƒÉng nh·∫≠p b·∫±ng user th∆∞·ªùng v√† ch·∫°y l·∫°i t√πy ch·ªçn n√†y,"
VI_INFO_ADD_ROOT_MANUALLY_CMD="   ho·∫∑c th·ª±c hi·ªán th·ªß c√¥ng: sudo usermod -aG docker <t√™n_user_c·ªßa_b·∫°n>"
VI_MSG_USER_ALREADY_IN_GROUP="‚úÖ Ng∆∞·ªùi d√πng '%s' ƒë√£ ·ªü trong nh√≥m 'docker'." # %s will be username
VI_INFO_ADDING_USER_TO_GROUP="üîµ ƒêang th√™m ng∆∞·ªùi d√πng '%s' v√†o nh√≥m 'docker'..." # %s will be username
VI_MSG_USER_ADDED_TO_GROUP="‚úÖ Ng∆∞·ªùi d√πng '%s' ƒë√£ ƒë∆∞·ª£c th√™m v√†o nh√≥m 'docker'." # %s will be username
VI_INFO_LOGOUT_REQUIRED="   L∆ØU √ù: B·∫°n c·∫ßn ƒêƒÇNG XU·∫§T v√† ƒêƒÇNG NH·∫¨P L·∫†I ƒë·ªÉ thay ƒë·ªïi c√≥ hi·ªáu l·ª±c,"
VI_INFO_NEWGRP_OPTION="   ho·∫∑c ch·∫°y l·ªánh 'newgrp docker' trong terminal hi·ªán t·∫°i."
VI_ERR_ADDING_USER_TO_GROUP="‚ùå L·ªói khi th√™m ng∆∞·ªùi d√πng '%s' v√†o nh√≥m 'docker'." # %s will be username

VI_PROMPT_CONTAINER_ID_FOR_LOGS="Nh·∫≠p ID ho·∫∑c T√™n c·ªßa Container ƒë·ªÉ xem log: "
VI_INFO_VIEWING_LOGS="üîµ Log c·ªßa container '%s' (Nh·∫•n Ctrl+C ƒë·ªÉ tho√°t):" # %s will be container_id
VI_PROMPT_IMAGE_TO_PULL="Nh·∫≠p t√™n image c·∫ßn pull (v√≠ d·ª•: ubuntu:latest ho·∫∑c nginx): "
VI_ERR_IMAGE_NAME_EMPTY="‚ö†Ô∏è T√™n image kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."
VI_INFO_PULLING_IMAGE="üîµ ƒêang pull image '%s'..." # %s will be image_name


# --- H√ÄM L·∫§Y CHU·ªñI THEO NG√îN NG·ªÆ ---
get_string() {
  local key="$1"
  local var_name
  if [ "$SCRIPT_LANG" == "vi" ]; then
    var_name="VI_$key"
  else
    var_name="EN_$key"
  fi
  # S·ª≠ d·ª•ng indirect expansion ƒë·ªÉ l·∫•y gi√° tr·ªã c·ªßa bi·∫øn c√≥ t√™n ƒë∆∞·ª£c l∆∞u trong var_name
  printf "%s" "${!var_name}"
}

# --- H√ÄM CH·ªåN NG√îN NG·ªÆ ---
select_language() {
    echo "Choose your language / Ch·ªçn ng√¥n ng·ªØ c·ªßa b·∫°n:"
    echo "1. English"
    echo "2. Ti·∫øng Vi·ªát"
    local choice
    # ƒê·ªçc tr·ª±c ti·∫øp t·ª´ /dev/tty ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông ngay c·∫£ khi stdin ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng
    read -r -p "$(get_string "LANG_CHOICE_PROMPT")" choice < /dev/tty
    case "$choice" in
        1) SCRIPT_LANG="en" ;;
        2) SCRIPT_LANG="vi" ;;
        *) echo "$(get_string "LANG_INVALID_CHOICE")"
           SCRIPT_LANG="en" ;; # M·∫∑c ƒë·ªãnh Ti·∫øng Anh n·∫øu l·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá
    esac
    clear # X√≥a m√†n h√¨nh sau khi ch·ªçn ng√¥n ng·ªØ
}

# --- KI·ªÇM TRA QUY·ªÄN ROOT (SAU KHI C√ì H√ÄM get_string) ---
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "$(get_string "ACCESS_DENIED")"
        echo "$(get_string "PROMPT_SUDO_RERUN")"
        exit 1
    fi
}

# --- G·ªåI H√ÄM CH·ªåN NG√îN NG·ªÆ V√Ä KI·ªÇM TRA ROOT ---
select_language # G·ªçi h√†m ch·ªçn ng√¥n ng·ªØ tr∆∞·ªõc
check_root      # Sau ƒë√≥ ki·ªÉm tra root ƒë·ªÉ c√°c th√¥ng b√°o l·ªói c√≥ th·ªÉ ƒëa ng√¥n ng·ªØ

# --- C√ÅC H√ÄM CH·ª®C NƒÇNG (S·ª¨ D d·ª•ng get_string) ---

# H√†m ki·ªÉm tra Docker ƒë√£ c√†i ƒë·∫∑t ch∆∞a
check_docker_installed() {
  if ! command -v docker &> /dev/null; then
    echo "$(get_string "MSG_DOCKER_NOT_INSTALLED_CHOOSE_INSTALL")"
    return 1
  fi
  return 0
}

# 1. C√†i ƒë·∫∑t Docker
install_docker() {
  echo "$(get_string "INFO_INSTALLING_DOCKER")"
  if command -v docker &> /dev/null; then
    printf "$(get_string "MSG_DOCKER_ALREADY_INSTALLED") %s\n" "$(docker --version)"
    read -r -p "$(get_string "PROMPT_REINSTALL_CONFIRM")" reinstall_confirm < /dev/tty
    if [[ "$reinstall_confirm" != "y" && "$reinstall_confirm" != "Y" ]]; then
      return
    fi
  fi

  echo "$(get_string "INFO_UNINSTALLING_OLD_VERSIONS")"
  sudo dnf remove docker \
                    docker-client \
                    docker-client-latest \
                    docker-common \
                    docker-latest \
                    docker-latest-logrotate \
                    docker-logrotate \
                    docker-engine \
                    podman \
                    runc -y > /dev/null 2>&1
  echo "$(get_string "INFO_INSTALLING_DEPS_REPO")"
  sudo dnf install -y dnf-utils device-mapper-persistent-data lvm2 > /dev/null 2>&1
  sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo > /dev/null 2>&1
  echo "$(get_string "INFO_INSTALLING_DOCKER_ENGINE")"
  sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  if [ $? -eq 0 ]; then
    echo "$(get_string "MSG_DOCKER_INSTALL_SUCCESS")"
    sudo systemctl start docker
    sudo systemctl enable docker
    echo "$(get_string "MSG_DOCKER_SERVICE_STARTED_ENABLED")"
    echo "$(get_string "INFO_ADD_USER_TO_GROUP_POST_INSTALL")"
  else
    echo "$(get_string "ERR_DOCKER_INSTALL_FAILED")"
  fi
}

# 2. G·ª° c√†i ƒë·∫∑t Docker
uninstall_docker() {
  if ! check_docker_installed; then return; fi
  read -r -p "$(get_string "PROMPT_UNINSTALL_CONFIRM")" confirm < /dev/tty
  if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
    echo "$(get_string "INFO_UNINSTALLING_DOCKER")"
    sudo systemctl stop docker
    sudo dnf remove -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    sudo rm -rf /var/lib/docker
    sudo rm -rf /var/lib/containerd
    echo "$(get_string "MSG_UNINSTALL_COMPLETE")"
  else
    echo "$(get_string "MSG_UNINSTALL_CANCELLED")"
  fi
}

# 3. Kh·ªüi ƒë·ªông Docker Service
start_docker_service() {
  if ! check_docker_installed; then return; fi
  echo "$(get_string "INFO_STARTING_DOCKER")"
  sudo systemctl start docker
  if sudo systemctl is-active --quiet docker; then
    echo "$(get_string "MSG_DOCKER_SERVICE_STARTED")"
  else
    echo "$(get_string "ERR_STARTING_DOCKER")"
  fi
}

# 4. D·ª´ng Docker Service
stop_docker_service() {
  if ! check_docker_installed; then return; fi
  echo "$(get_string "INFO_STOPPING_DOCKER")"
  sudo systemctl stop docker
  if ! sudo systemctl is-active --quiet docker; then
    echo "$(get_string "MSG_DOCKER_SERVICE_STOPPED")"
  else
    echo "$(get_string "ERR_STOPPING_DOCKER")"
  fi
}

# 5. Kh·ªüi ƒë·ªông l·∫°i Docker Service
restart_docker_service() {
  if ! check_docker_installed; then return; fi
  echo "$(get_string "INFO_RESTARTING_DOCKER")"
  sudo systemctl restart docker
  if sudo systemctl is-active --quiet docker; then
    echo "$(get_string "MSG_DOCKER_SERVICE_RESTARTED")"
  else
    echo "$(get_string "ERR_RESTARTING_DOCKER")"
  fi
}

# 6. Ki·ªÉm tra tr·∫°ng th√°i Docker Service
status_docker_service() {
  if ! check_docker_installed; then return; fi
  echo "$(get_string "INFO_DOCKER_SERVICE_STATUS")"
  sudo systemctl status docker
}

# 7. Li·ªát k√™ Docker Images
list_docker_images() {
  if ! check_docker_installed; then return; fi
  echo "$(get_string "INFO_LISTING_IMAGES")"
  sudo docker images
}

# 8. Li·ªát k√™ Docker Containers (ƒëang ch·∫°y v√† ƒë√£ d·ª´ng)
list_docker_containers() {
  if ! check_docker_installed; then return; fi
  echo "$(get_string "INFO_LISTING_CONTAINERS")"
  sudo docker ps -a
}

# 9. X√≥a m·ªôt Docker Image c·ª• th·ªÉ
remove_docker_image() {
  if ! check_docker_installed; then return; fi
  list_docker_images
  local image_id
  read -r -p "$(get_string "PROMPT_IMAGE_ID_TO_REMOVE")" image_id < /dev/tty
  if [ -z "$image_id" ]; then
    echo "$(get_string "ERR_IMAGE_ID_EMPTY")"
    return
  fi
  sudo docker rmi "$image_id"
}

# 10. X√≥a m·ªôt Docker Container c·ª• th·ªÉ
remove_docker_container() {
  if ! check_docker_installed; then return; fi
  list_docker_containers
  local container_id
  read -r -p "$(get_string "PROMPT_CONTAINER_ID_TO_REMOVE")" container_id < /dev/tty
  if [ -z "$container_id" ]; then
    echo "$(get_string "ERR_CONTAINER_ID_EMPTY")"
    return
  fi
  sudo docker rm "$container_id"
}

# 11. D·ªçn d·∫πp Docker (Prune)
prune_docker_system() {
  if ! check_docker_installed; then return; fi
  echo "$(get_string "WARN_PRUNE_SYSTEM")"
  echo "$(get_string "INFO_PRUNE_CONTAINERS")"
  echo "$(get_string "INFO_PRUNE_NETWORKS")"
  echo "$(get_string "INFO_PRUNE_IMAGES")"
  echo "$(get_string "INFO_PRUNE_CACHE")"
  read -r -p "$(get_string "PROMPT_PRUNE_CONFIRM")" confirm < /dev/tty
  if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
    echo "$(get_string "INFO_PRUNING_SYSTEM")"
    sudo docker system prune -a -f --volumes
    echo "$(get_string "MSG_PRUNE_COMPLETE")"
  else
    echo "$(get_string "MSG_PRUNE_CANCELLED")"
  fi
}

# 12. Th√™m ng∆∞·ªùi d√πng hi·ªán t·∫°i v√†o nh√≥m docker
add_user_to_docker_group() {
  local current_user
  current_user=${SUDO_USER:-$(whoami)}

  if [ -z "$current_user" ] || [ "$current_user" == "root" ]; then
      echo "$(get_string "ERR_CANNOT_ADD_ROOT_USER")"
      echo "$(get_string "INFO_ADD_ROOT_MANUALLY")"
      echo "$(get_string "INFO_ADD_ROOT_MANUALLY_CMD")"
      return
  fi

  if groups "$current_user" | grep -q '\bdocker\b'; then
    printf "$(get_string "MSG_USER_ALREADY_IN_GROUP")\n" "$current_user"
  else
    printf "$(get_string "INFO_ADDING_USER_TO_GROUP")\n" "$current_user"
    sudo usermod -aG docker "$current_user"
    if [ $? -eq 0 ]; then
      printf "$(get_string "MSG_USER_ADDED_TO_GROUP")\n" "$current_user"
      echo "$(get_string "INFO_LOGOUT_REQUIRED")"
      echo "$(get_string "INFO_NEWGRP_OPTION")"
    else
      printf "$(get_string "ERR_ADDING_USER_TO_GROUP")\n" "$current_user"
    fi
  fi
}

# 13. Xem log c·ªßa m·ªôt container
view_container_logs() {
  if ! check_docker_installed; then return; fi
  list_docker_containers
  local container_id
  read -r -p "$(get_string "PROMPT_CONTAINER_ID_FOR_LOGS")" container_id < /dev/tty
  if [ -z "$container_id" ]; then
    echo "$(get_string "ERR_CONTAINER_ID_EMPTY")"
    return
  fi
  printf "$(get_string "INFO_VIEWING_LOGS")\n" "$container_id"
  sudo docker logs -f "$container_id"
}

# 14. Pull m·ªôt image t·ª´ Docker Hub
pull_docker_image() {
  if ! check_docker_installed; then return; fi
  local image_name
  read -r -p "$(get_string "PROMPT_IMAGE_TO_PULL")" image_name < /dev/tty
  if [ -z "$image_name" ]; then
    echo "$(get_string "ERR_IMAGE_NAME_EMPTY")"
    return
  fi
  printf "$(get_string "INFO_PULLING_IMAGE")\n" "$image_name"
  sudo docker pull "$image_name"
}

# --- MENU CH√çNH ---
show_menu() {
  echo ""
  echo "=============================================="
  echo "$(get_string "MENU_HEADER")"
  echo "=============================================="
  echo "$(get_string "MENU_OPT_INSTALL_DOCKER")"
  echo "$(get_string "MENU_OPT_UNINSTALL_DOCKER")"
  echo "----------------------------------------------"
  echo "$(get_string "MENU_DOCKER_SERVICE_SUBHEADER")"
  echo "$(get_string "MENU_OPT_START_SERVICE")"
  echo "$(get_string "MENU_OPT_STOP_SERVICE")"
  echo "$(get_string "MENU_OPT_RESTART_SERVICE")"
  echo "$(get_string "MENU_OPT_STATUS_SERVICE")"
  echo "----------------------------------------------"
  echo "$(get_string "MENU_IMG_CONT_SUBHEADER")"
  echo "$(get_string "MENU_OPT_LIST_IMAGES")"
  echo "$(get_string "MENU_OPT_LIST_CONTAINERS")"
  echo "$(get_string "MENU_OPT_REMOVE_IMAGE")"
  echo "$(get_string "MENU_OPT_REMOVE_CONTAINER")"
  echo "$(get_string "MENU_OPT_VIEW_LOGS")"
  echo "$(get_string "MENU_OPT_PULL_IMAGE")"
  echo "----------------------------------------------"
  echo "$(get_string "MENU_UTIL_MAINT_SUBHEADER")"
  echo "$(get_string "MENU_OPT_PRUNE_SYSTEM")"
  echo "$(get_string "MENU_OPT_ADD_USER_GROUP")"
  echo "----------------------------------------------"
  echo "$(get_string "MENU_OPT_EXIT")"
  echo "=============================================="
}

# --- V√íNG L·∫∂P CH√çNH C·ª¶A K·ªäCH B·∫¢N ---
while true; do
  show_menu
  # ƒê·ªçc tr·ª±c ti·∫øp t·ª´ /dev/tty ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông ngay c·∫£ khi stdin ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng
  read -r -p "$(get_string "PROMPT_ENTER_CHOICE_MENU")" choice < /dev/tty

  case $choice in
    1) install_docker ;;
    2) uninstall_docker ;;
    3) start_docker_service ;;
    4) stop_docker_service ;;
    5) restart_docker_service ;;
    6) status_docker_service ;;
    7) list_docker_images ;;
    8) list_docker_containers ;;
    9) remove_docker_image ;;
    10) remove_docker_container ;;
    11) view_container_logs ;;
    12) pull_docker_image ;;
    13) prune_docker_system ;;
    14) add_user_to_docker_group ;;
    0) echo "$(get_string "MSG_EXITING")"; exit 0 ;;
    *) echo "$(get_string "ERR_INVALID_OPTION")" ;;
  esac
  echo ""
  read -r -p "$(get_string "MSG_PRESS_ENTER_TO_CONTINUE")" < /dev/tty
  clear 
done