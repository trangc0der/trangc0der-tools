#!/bin/bash

# K·ªãch b·∫£n Qu·∫£n l√Ω VPS To√†n di·ªán (VPS All-In-One) cho AlmaLinux 8.10
# Phi√™n b·∫£n: 1.0
# H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ: Ti·∫øng Vi·ªát, Ti·∫øng Anh

# --- BI·∫æN NG√îN NG·ªÆ TO√ÄN C·ª§C ---
SCRIPT_LANG="en" # M·∫∑c ƒë·ªãnh l√† Ti·∫øng Anh

# --- ƒê·ªäNH NGHƒ®A CHU·ªñI VƒÇN B·∫¢N (TI·∫æNG ANH) ---
EN_ACCESS_DENIED="ERROR: This script must be run with root or sudo privileges."
EN_PROMPT_SUDO_RERUN="Please try again with: sudo \$0"
EN_LANG_CHOICE_PROMPT="Enter your choice (1-2): "
EN_LANG_INVALID_CHOICE="Invalid choice, defaulting to English."

EN_MAIN_MENU_HEADER="     üåü VPS All-In-One Management Script (AlmaLinux 8.10) üåü     "
EN_MENU_CAT_SYS_INFO="1. System Information"
EN_MENU_CAT_SYS_MAINTENANCE="2. System Maintenance"
EN_MENU_CAT_SERVICE_MGMT="3. Service Management"
EN_MENU_CAT_USER_MGMT="4. User Management"
EN_MENU_CAT_FIREWALL_MGMT="5. Firewall (firewalld) Management"
EN_MENU_OPT_EXIT="0. Exit"
EN_PROMPT_ENTER_CHOICE="Please select an option: "
EN_ERR_INVALID_OPTION="‚ö†Ô∏è  Invalid option. Please try again."
EN_MSG_PRESS_ENTER_TO_CONTINUE="Press Enter to continue..."
EN_MSG_EXITING="üëã  Exiting script!"

# System Info
EN_INFO_SYS_INFO_HEADER="--- System Information ---"
EN_INFO_HOSTNAME="Hostname:"
EN_INFO_OS_VERSION="OS Version:"
EN_INFO_KERNEL_VERSION="Kernel Version:"
EN_INFO_UPTIME="System Uptime:"
EN_INFO_CPU_LOAD="CPU Load Average (1, 5, 15 min):"
EN_INFO_DISK_USAGE_HEADER="--- Disk Usage ---"
EN_INFO_MEMORY_USAGE_HEADER="--- Memory Usage ---"

# System Maintenance
EN_INFO_UPDATING_SYSTEM="üîµ Updating system packages... This may take a while."
EN_MSG_UPDATE_SUCCESS="‚úÖ System updated successfully."
EN_MSG_UPDATE_FAIL="‚ùå Failed to update system."
EN_PROMPT_PKG_NAME_INSTALL="Enter the name of the package to install: "
EN_INFO_INSTALLING_PKG="üîµ Installing package '%s'..." # %s is package name
EN_MSG_PKG_INSTALL_SUCCESS="‚úÖ Package '%s' installed successfully."
EN_MSG_PKG_INSTALL_FAIL="‚ùå Failed to install package '%s'."
EN_ERR_PKG_NAME_EMPTY="‚ö†Ô∏è Package name cannot be empty."
EN_PROMPT_PKG_NAME_REMOVE="Enter the name of the package to remove: "
EN_INFO_REMOVING_PKG="üîµ Removing package '%s'..." # %s is package name
EN_MSG_PKG_REMOVE_SUCCESS="‚úÖ Package '%s' removed successfully."
EN_MSG_PKG_REMOVE_FAIL="‚ùå Failed to remove package '%s'."
EN_PROMPT_REBOOT_CONFIRM="‚ö†Ô∏è  Are you sure you want to reboot the server now? (y/N): "
EN_INFO_REBOOTING="üîµ Rebooting server NOW..."
EN_MSG_REBOOT_CANCELLED="‚ÑπÔ∏è  Reboot cancelled."
EN_PROMPT_SHUTDOWN_CONFIRM="‚ö†Ô∏è  Are you sure you want to shut down the server now? (y/N): "
EN_INFO_SHUTTING_DOWN="üîµ Shutting down server NOW..."
EN_MSG_SHUTDOWN_CANCELLED="‚ÑπÔ∏è  Shutdown cancelled."

# Service Management
EN_SERVICE_MENU_HEADER="--- Service Management Menu ---"
EN_SERVICE_OPT_START="1. Start a Service"
EN_SERVICE_OPT_STOP="2. Stop a Service"
EN_SERVICE_OPT_RESTART="3. Restart a Service"
EN_SERVICE_OPT_STATUS="4. Check Service Status"
EN_SERVICE_OPT_ENABLE="5. Enable a Service (start on boot)"
EN_SERVICE_OPT_DISABLE="6. Disable a Service (don't start on boot)"
EN_SERVICE_OPT_BACK="0. Back to Main Menu"
EN_PROMPT_SERVICE_NAME="Enter the service name (e.g., httpd, sshd): "
EN_ERR_SERVICE_NAME_EMPTY="‚ö†Ô∏è Service name cannot be empty."
EN_INFO_STARTING_SERVICE="üîµ Starting service '%s'..."
EN_MSG_SERVICE_START_SUCCESS="‚úÖ Service '%s' started successfully."
EN_MSG_SERVICE_START_FAIL="‚ùå Failed to start service '%s'."
EN_INFO_STOPPING_SERVICE="üîµ Stopping service '%s'..."
EN_MSG_SERVICE_STOP_SUCCESS="‚úÖ Service '%s' stopped successfully."
EN_MSG_SERVICE_STOP_FAIL="‚ùå Failed to stop service '%s'."
EN_INFO_RESTARTING_SERVICE="üîµ Restarting service '%s'..."
EN_MSG_SERVICE_RESTART_SUCCESS="‚úÖ Service '%s' restarted successfully."
EN_MSG_SERVICE_RESTART_FAIL="‚ùå Failed to restart service '%s'."
EN_INFO_SERVICE_STATUS="üîµ Status of service '%s':"
EN_INFO_ENABLING_SERVICE="üîµ Enabling service '%s'..."
EN_MSG_SERVICE_ENABLE_SUCCESS="‚úÖ Service '%s' enabled."
EN_MSG_SERVICE_ENABLE_FAIL="‚ùå Failed to enable service '%s'."
EN_INFO_DISABLING_SERVICE="üîµ Disabling service '%s'..."
EN_MSG_SERVICE_DISABLE_SUCCESS="‚úÖ Service '%s' disabled."
EN_MSG_SERVICE_DISABLE_FAIL="‚ùå Failed to disable service '%s'."

# User Management
EN_USER_MENU_HEADER="--- User Management Menu ---"
EN_USER_OPT_ADD="1. Add a New User"
EN_USER_OPT_DELETE="2. Delete a User"
EN_USER_OPT_ADD_SUDO="3. Add User to Sudoers (wheel group)"
EN_USER_OPT_LIST="4. List All Local Users"
EN_USER_OPT_BACK="0. Back to Main Menu"
EN_PROMPT_USERNAME_ADD="Enter username for the new user: "
EN_ERR_USERNAME_EMPTY="‚ö†Ô∏è Username cannot be empty."
EN_INFO_ADDING_USER="üîµ Adding user '%s'..."
EN_MSG_USER_ADD_SUCCESS="‚úÖ User '%s' added successfully. Please set a password for the user."
EN_MSG_USER_ADD_FAIL="‚ùå Failed to add user '%s'."
EN_PROMPT_SET_PASSWORD_NOW="Do you want to set password for '%s' now? (y/N): "
EN_PROMPT_USERNAME_DELETE="Enter username to delete: "
EN_PROMPT_DELETE_USER_CONFIRM="‚ö†Ô∏è  Are you sure you want to delete user '%s' and their home directory? (y/N): "
EN_INFO_DELETING_USER="üîµ Deleting user '%s'..."
EN_MSG_USER_DELETE_SUCCESS="‚úÖ User '%s' deleted successfully."
EN_MSG_USER_DELETE_FAIL="‚ùå Failed to delete user '%s'."
EN_PROMPT_USERNAME_SUDO="Enter username to add to sudoers (wheel group): "
EN_INFO_ADDING_USER_SUDO="üîµ Adding user '%s' to wheel group..."
EN_MSG_USER_ADD_SUDO_SUCCESS="‚úÖ User '%s' added to wheel group. They will have sudo privileges on next login."
EN_MSG_USER_ADD_SUDO_FAIL="‚ùå Failed to add user '%s' to wheel group."
EN_MSG_USER_ALREADY_SUDO="‚ÑπÔ∏è  User '%s' is already in the wheel group or has sudo privileges."
EN_INFO_LISTING_USERS="--- Local Users ---"

# Firewall Management
EN_FIREWALL_MENU_HEADER="--- Firewall (firewalld) Management Menu ---"
EN_FIREWALL_OPT_STATUS="1. Check Firewall Status"
EN_FIREWALL_OPT_ADD_SERVICE="2. Add a Service"
EN_FIREWALL_OPT_REMOVE_SERVICE="3. Remove a Service"
EN_FIREWALL_OPT_ADD_PORT="4. Add a Port"
EN_FIREWALL_OPT_REMOVE_PORT="5. Remove a Port"
EN_FIREWALL_OPT_RELOAD="6. Reload Firewall"
EN_FIREWALL_OPT_LIST_ALL="7. List All Rules & Zones"
EN_FIREWALL_OPT_BACK="0. Back to Main Menu"
EN_INFO_FIREWALL_STATUS_HEADER="--- Firewall Status ---"
EN_MSG_FIREWALL_NOT_RUNNING="‚ö†Ô∏è Firewalld is not running."
EN_PROMPT_SERVICE_FIREWALL_ADD="Enter service name to add (e.g., http, https, ssh): "
EN_ERR_SERVICE_FW_NAME_EMPTY="‚ö†Ô∏è Service name cannot be empty."
EN_INFO_ADDING_SERVICE_FW="üîµ Adding service '%s' to firewall (permanent)..."
EN_MSG_SERVICE_FW_ADD_SUCCESS="‚úÖ Service '%s' added. Reload firewall to apply changes."
EN_MSG_SERVICE_FW_ADD_FAIL="‚ùå Failed to add service '%s'."
EN_PROMPT_SERVICE_FIREWALL_REMOVE="Enter service name to remove: "
EN_INFO_REMOVING_SERVICE_FW="üîµ Removing service '%s' from firewall (permanent)..."
EN_MSG_SERVICE_FW_REMOVE_SUCCESS="‚úÖ Service '%s' removed. Reload firewall to apply changes."
EN_MSG_SERVICE_FW_REMOVE_FAIL="‚ùå Failed to remove service '%s'."
EN_PROMPT_PORT_FIREWALL_ADD="Enter port to add (e.g., 8080/tcp or 53/udp): "
EN_ERR_PORT_FW_EMPTY_INVALID="‚ö†Ô∏è Port cannot be empty and should be in format port/protocol (e.g., 8080/tcp)."
EN_INFO_ADDING_PORT_FW="üîµ Adding port '%s' to firewall (permanent)..."
EN_MSG_PORT_FW_ADD_SUCCESS="‚úÖ Port '%s' added. Reload firewall to apply changes."
EN_MSG_PORT_FW_ADD_FAIL="‚ùå Failed to add port '%s'."
EN_PROMPT_PORT_FIREWALL_REMOVE="Enter port to remove (e.g., 8080/tcp): "
EN_INFO_REMOVING_PORT_FW="üîµ Removing port '%s' from firewall (permanent)..."
EN_MSG_PORT_FW_REMOVE_SUCCESS="‚úÖ Port '%s' removed. Reload firewall to apply changes."
EN_MSG_PORT_FW_REMOVE_FAIL="‚ùå Failed to remove port '%s'."
EN_INFO_RELOADING_FIREWALL="üîµ Reloading firewall..."
EN_MSG_FIREWALL_RELOAD_SUCCESS="‚úÖ Firewall reloaded successfully."
EN_MSG_FIREWALL_RELOAD_FAIL="‚ùå Failed to reload firewall."
EN_INFO_LISTING_FIREWALL_RULES="--- Current Firewall Configuration ---"

# --- ƒê·ªäNH NGHƒ®A CHU·ªñI VƒÇN B·∫¢N (TI·∫æNG VI·ªÜT) ---
VI_ACCESS_DENIED="‚ö†Ô∏è  L·ªñI: K·ªãch b·∫£n n√†y c·∫ßn ƒë∆∞·ª£c ch·∫°y v·ªõi quy·ªÅn root ho·∫∑c sudo."
VI_PROMPT_SUDO_RERUN="Vui l√≤ng ch·∫°y l·∫°i v·ªõi l·ªánh: sudo \$0"
VI_LANG_CHOICE_PROMPT="Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1-2): "
VI_LANG_INVALID_CHOICE="L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, m·∫∑c ƒë·ªãnh Ti·∫øng Anh."

VI_MAIN_MENU_HEADER="     üåü K·ªãch B·∫£n Qu·∫£n L√Ω VPS To√†n Di·ªán (AlmaLinux 8.10) üåü     "
VI_MENU_CAT_SYS_INFO="1. Th√¥ng tin H·ªá th·ªëng"
VI_MENU_CAT_SYS_MAINTENANCE="2. B·∫£o tr√¨ H·ªá th·ªëng"
VI_MENU_CAT_SERVICE_MGMT="3. Qu·∫£n l√Ω D·ªãch v·ª•"
VI_MENU_CAT_USER_MGMT="4. Qu·∫£n l√Ω Ng∆∞·ªùi d√πng"
VI_MENU_CAT_FIREWALL_MGMT="5. Qu·∫£n l√Ω T∆∞·ªùng l·ª≠a (firewalld)"
VI_MENU_OPT_EXIT="0. Tho√°t"
VI_PROMPT_ENTER_CHOICE="Vui l√≤ng ch·ªçn m·ªôt t√πy ch·ªçn: "
VI_ERR_INVALID_OPTION="‚ö†Ô∏è  L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i."
VI_MSG_PRESS_ENTER_TO_CONTINUE="Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c..."
VI_MSG_EXITING="üëã  Tho√°t k·ªãch b·∫£n!"

# System Info
VI_INFO_SYS_INFO_HEADER="--- Th√¥ng tin H·ªá th·ªëng ---"
VI_INFO_HOSTNAME="T√™n m√°y (Hostname):"
VI_INFO_OS_VERSION="Phi√™n b·∫£n HƒêH:"
VI_INFO_KERNEL_VERSION="Phi√™n b·∫£n Kernel:"
VI_INFO_UPTIME="Th·ªùi gian ho·∫°t ƒë·ªông:"
VI_INFO_CPU_LOAD="T·∫£i CPU trung b√¨nh (1, 5, 15 ph√∫t):"
VI_INFO_DISK_USAGE_HEADER="--- Dung l∆∞·ª£ng ƒêƒ©a ---"
VI_INFO_MEMORY_USAGE_HEADER="--- B·ªô nh·ªõ (RAM) ---"

# System Maintenance
VI_INFO_UPDATING_SYSTEM="üîµ ƒêang c·∫≠p nh·∫≠t c√°c g√≥i h·ªá th·ªëng... Vi·ªác n√†y c√≥ th·ªÉ m·∫•t m·ªôt l√∫c."
VI_MSG_UPDATE_SUCCESS="‚úÖ H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng."
VI_MSG_UPDATE_FAIL="‚ùå C·∫≠p nh·∫≠t h·ªá th·ªëng th·∫•t b·∫°i."
VI_PROMPT_PKG_NAME_INSTALL="Nh·∫≠p t√™n g√≥i c·∫ßn c√†i ƒë·∫∑t: "
VI_INFO_INSTALLING_PKG="üîµ ƒêang c√†i ƒë·∫∑t g√≥i '%s'..."
VI_MSG_PKG_INSTALL_SUCCESS="‚úÖ G√≥i '%s' ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng."
VI_MSG_PKG_INSTALL_FAIL="‚ùå C√†i ƒë·∫∑t g√≥i '%s' th·∫•t b·∫°i."
VI_ERR_PKG_NAME_EMPTY="‚ö†Ô∏è T√™n g√≥i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."
VI_PROMPT_PKG_NAME_REMOVE="Nh·∫≠p t√™n g√≥i c·∫ßn g·ª° b·ªè: "
VI_INFO_REMOVING_PKG="üîµ ƒêang g·ª° b·ªè g√≥i '%s'..."
VI_MSG_PKG_REMOVE_SUCCESS="‚úÖ G√≥i '%s' ƒë√£ ƒë∆∞·ª£c g·ª° b·ªè th√†nh c√¥ng."
VI_MSG_PKG_REMOVE_FAIL="‚ùå G·ª° b·ªè g√≥i '%s' th·∫•t b·∫°i."
VI_PROMPT_REBOOT_CONFIRM="‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh·ªüi ƒë·ªông l·∫°i m√°y ch·ªß ngay b√¢y gi·ªù kh√¥ng? (y/N): "
VI_INFO_REBOOTING="üîµ ƒêang kh·ªüi ƒë·ªông l·∫°i m√°y ch·ªß NGAY B√ÇY GI·ªú..."
VI_MSG_REBOOT_CANCELLED="‚ÑπÔ∏è  ƒê√£ h·ªßy kh·ªüi ƒë·ªông l·∫°i."
VI_PROMPT_SHUTDOWN_CONFIRM="‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫Øt m√°y ch·ªß ngay b√¢y gi·ªù kh√¥ng? (y/N): "
VI_INFO_SHUTTING_DOWN="üîµ ƒêang t·∫Øt m√°y ch·ªß NGAY B√ÇY GI·ªú..."
VI_MSG_SHUTDOWN_CANCELLED="‚ÑπÔ∏è  ƒê√£ h·ªßy t·∫Øt m√°y."

# Service Management
VI_SERVICE_MENU_HEADER="--- Menu Qu·∫£n l√Ω D·ªãch v·ª• ---"
VI_SERVICE_OPT_START="1. Kh·ªüi ƒë·ªông D·ªãch v·ª•"
VI_SERVICE_OPT_STOP="2. D·ª´ng D·ªãch v·ª•"
VI_SERVICE_OPT_RESTART="3. Kh·ªüi ƒë·ªông l·∫°i D·ªãch v·ª•"
VI_SERVICE_OPT_STATUS="4. Ki·ªÉm tra Tr·∫°ng th√°i D·ªãch v·ª•"
VI_SERVICE_OPT_ENABLE="5. K√≠ch ho·∫°t D·ªãch v·ª• (kh·ªüi ƒë·ªông c√πng h·ªá th·ªëng)"
VI_SERVICE_OPT_DISABLE="6. V√¥ hi·ªáu h√≥a D·ªãch v·ª• (kh√¥ng kh·ªüi ƒë·ªông c√πng h·ªá th·ªëng)"
VI_SERVICE_OPT_BACK="0. Quay l·∫°i Menu Ch√≠nh"
VI_PROMPT_SERVICE_NAME="Nh·∫≠p t√™n d·ªãch v·ª• (v√≠ d·ª•: httpd, sshd): "
VI_ERR_SERVICE_NAME_EMPTY="‚ö†Ô∏è T√™n d·ªãch v·ª• kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."
VI_INFO_STARTING_SERVICE="üîµ ƒêang kh·ªüi ƒë·ªông d·ªãch v·ª• '%s'..."
VI_MSG_SERVICE_START_SUCCESS="‚úÖ D·ªãch v·ª• '%s' ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông."
VI_MSG_SERVICE_START_FAIL="‚ùå Kh·ªüi ƒë·ªông d·ªãch v·ª• '%s' th·∫•t b·∫°i."
VI_INFO_STOPPING_SERVICE="üîµ ƒêang d·ª´ng d·ªãch v·ª• '%s'..."
VI_MSG_SERVICE_STOP_SUCCESS="‚úÖ D·ªãch v·ª• '%s' ƒë√£ ƒë∆∞·ª£c d·ª´ng."
VI_MSG_SERVICE_STOP_FAIL="‚ùå D·ª´ng d·ªãch v·ª• '%s' th·∫•t b·∫°i."
VI_INFO_RESTARTING_SERVICE="üîµ ƒêang kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• '%s'..."
VI_MSG_SERVICE_RESTART_SUCCESS="‚úÖ D·ªãch v·ª• '%s' ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i."
VI_MSG_SERVICE_RESTART_FAIL="‚ùå Kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• '%s' th·∫•t b·∫°i."
VI_INFO_SERVICE_STATUS="üîµ Tr·∫°ng th√°i c·ªßa d·ªãch v·ª• '%s':"
VI_INFO_ENABLING_SERVICE="üîµ ƒêang k√≠ch ho·∫°t d·ªãch v·ª• '%s'..."
VI_MSG_SERVICE_ENABLE_SUCCESS="‚úÖ D·ªãch v·ª• '%s' ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t."
VI_MSG_SERVICE_ENABLE_FAIL="‚ùå K√≠ch ho·∫°t d·ªãch v·ª• '%s' th·∫•t b·∫°i."
VI_INFO_DISABLING_SERVICE="üîµ ƒêang v√¥ hi·ªáu h√≥a d·ªãch v·ª• '%s'..."
VI_MSG_SERVICE_DISABLE_SUCCESS="‚úÖ D·ªãch v·ª• '%s' ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a."
VI_MSG_SERVICE_DISABLE_FAIL="‚ùå V√¥ hi·ªáu h√≥a d·ªãch v·ª• '%s' th·∫•t b·∫°i."

# User Management
VI_USER_MENU_HEADER="--- Menu Qu·∫£n l√Ω Ng∆∞·ªùi d√πng ---"
VI_USER_OPT_ADD="1. Th√™m Ng∆∞·ªùi d√πng M·ªõi"
VI_USER_OPT_DELETE="2. X√≥a Ng∆∞·ªùi d√πng"
VI_USER_OPT_ADD_SUDO="3. Th√™m Ng∆∞·ªùi d√πng v√†o nh√≥m Sudo (wheel)"
VI_USER_OPT_LIST="4. Li·ªát k√™ T·∫•t c·∫£ Ng∆∞·ªùi d√πng N·ªôi b·ªô"
VI_USER_OPT_BACK="0. Quay l·∫°i Menu Ch√≠nh"
VI_PROMPT_USERNAME_ADD="Nh·∫≠p t√™n ng∆∞·ªùi d√πng m·ªõi: "
VI_ERR_USERNAME_EMPTY="‚ö†Ô∏è T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."
VI_INFO_ADDING_USER="üîµ ƒêang th√™m ng∆∞·ªùi d√πng '%s'..."
VI_MSG_USER_ADD_SUCCESS="‚úÖ Ng∆∞·ªùi d√πng '%s' ƒë√£ ƒë∆∞·ª£c th√™m. Vui l√≤ng ƒë·∫∑t m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng."
VI_MSG_USER_ADD_FAIL="‚ùå Th√™m ng∆∞·ªùi d√πng '%s' th·∫•t b·∫°i."
VI_PROMPT_SET_PASSWORD_NOW="B·∫°n c√≥ mu·ªën ƒë·∫∑t m·∫≠t kh·∫©u cho '%s' ngay b√¢y gi·ªù kh√¥ng? (y/N): "
VI_PROMPT_USERNAME_DELETE="Nh·∫≠p t√™n ng∆∞·ªùi d√πng c·∫ßn x√≥a: "
VI_PROMPT_DELETE_USER_CONFIRM="‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng '%s' v√† th∆∞ m·ª•c nh√† c·ªßa h·ªç kh√¥ng? (y/N): "
VI_INFO_DELETING_USER="üîµ ƒêang x√≥a ng∆∞·ªùi d√πng '%s'..."
VI_MSG_USER_DELETE_SUCCESS="‚úÖ Ng∆∞·ªùi d√πng '%s' ƒë√£ ƒë∆∞·ª£c x√≥a."
VI_MSG_USER_DELETE_FAIL="‚ùå X√≥a ng∆∞·ªùi d√πng '%s' th·∫•t b·∫°i."
VI_PROMPT_USERNAME_SUDO="Nh·∫≠p t√™n ng∆∞·ªùi d√πng c·∫ßn th√™m v√†o nh√≥m sudo (wheel): "
VI_INFO_ADDING_USER_SUDO="üîµ ƒêang th√™m ng∆∞·ªùi d√πng '%s' v√†o nh√≥m wheel..."
VI_MSG_USER_ADD_SUDO_SUCCESS="‚úÖ Ng∆∞·ªùi d√πng '%s' ƒë√£ ƒë∆∞·ª£c th√™m v√†o nh√≥m wheel. H·ªç s·∫Ω c√≥ quy·ªÅn sudo ·ªü l·∫ßn ƒëƒÉng nh·∫≠p t·ªõi."
VI_MSG_USER_ADD_SUDO_FAIL="‚ùå Th√™m ng∆∞·ªùi d√πng '%s' v√†o nh√≥m wheel th·∫•t b·∫°i."
VI_MSG_USER_ALREADY_SUDO="‚ÑπÔ∏è  Ng∆∞·ªùi d√πng '%s' ƒë√£ ·ªü trong nh√≥m wheel ho·∫∑c c√≥ quy·ªÅn sudo."
VI_INFO_LISTING_USERS="--- Ng∆∞·ªùi d√πng N·ªôi b·ªô ---"

# Firewall Management
VI_FIREWALL_MENU_HEADER="--- Menu Qu·∫£n l√Ω T∆∞·ªùng l·ª≠a (firewalld) ---"
VI_FIREWALL_OPT_STATUS="1. Ki·ªÉm tra Tr·∫°ng th√°i T∆∞·ªùng l·ª≠a"
VI_FIREWALL_OPT_ADD_SERVICE="2. Th√™m D·ªãch v·ª•"
VI_FIREWALL_OPT_REMOVE_SERVICE="3. X√≥a D·ªãch v·ª•"
VI_FIREWALL_OPT_ADD_PORT="4. Th√™m C·ªïng"
VI_FIREWALL_OPT_REMOVE_PORT="5. X√≥a C·ªïng"
VI_FIREWALL_OPT_RELOAD="6. T·∫£i l·∫°i T∆∞·ªùng l·ª≠a"
VI_FIREWALL_OPT_LIST_ALL="7. Li·ªát k√™ T·∫•t c·∫£ Quy t·∫Øc & Khu v·ª±c"
VI_FIREWALL_OPT_BACK="0. Quay l·∫°i Menu Ch√≠nh"
VI_INFO_FIREWALL_STATUS_HEADER="--- Tr·∫°ng th√°i T∆∞·ªùng l·ª≠a ---"
VI_MSG_FIREWALL_NOT_RUNNING="‚ö†Ô∏è Firewalld kh√¥ng ho·∫°t ƒë·ªông."
VI_PROMPT_SERVICE_FIREWALL_ADD="Nh·∫≠p t√™n d·ªãch v·ª• c·∫ßn th√™m (v√≠ d·ª•: http, https, ssh): "
VI_ERR_SERVICE_FW_NAME_EMPTY="‚ö†Ô∏è T√™n d·ªãch v·ª• kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."
VI_INFO_ADDING_SERVICE_FW="üîµ ƒêang th√™m d·ªãch v·ª• '%s' v√†o t∆∞·ªùng l·ª≠a (vƒ©nh vi·ªÖn)..."
VI_MSG_SERVICE_FW_ADD_SUCCESS="‚úÖ D·ªãch v·ª• '%s' ƒë√£ ƒë∆∞·ª£c th√™m. T·∫£i l·∫°i t∆∞·ªùng l·ª≠a ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi."
VI_MSG_SERVICE_FW_ADD_FAIL="‚ùå Th√™m d·ªãch v·ª• '%s' th·∫•t b·∫°i."
VI_PROMPT_SERVICE_FIREWALL_REMOVE="Nh·∫≠p t√™n d·ªãch v·ª• c·∫ßn x√≥a: "
VI_INFO_REMOVING_SERVICE_FW="üîµ ƒêang x√≥a d·ªãch v·ª• '%s' kh·ªèi t∆∞·ªùng l·ª≠a (vƒ©nh vi·ªÖn)..."
VI_MSG_SERVICE_FW_REMOVE_SUCCESS="‚úÖ D·ªãch v·ª• '%s' ƒë√£ ƒë∆∞·ª£c x√≥a. T·∫£i l·∫°i t∆∞·ªùng l·ª≠a ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi."
VI_MSG_SERVICE_FW_REMOVE_FAIL="‚ùå X√≥a d·ªãch v·ª• '%s' th·∫•t b·∫°i."
VI_PROMPT_PORT_FIREWALL_ADD="Nh·∫≠p c·ªïng c·∫ßn th√™m (v√≠ d·ª•: 8080/tcp ho·∫∑c 53/udp): "
VI_ERR_PORT_FW_EMPTY_INVALID="‚ö†Ô∏è C·ªïng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng v√† ph·∫£i theo ƒë·ªãnh d·∫°ng c·ªïng/giao_th·ª©c (v√≠ d·ª•: 8080/tcp)."
VI_INFO_ADDING_PORT_FW="üîµ ƒêang th√™m c·ªïng '%s' v√†o t∆∞·ªùng l·ª≠a (vƒ©nh vi·ªÖn)..."
VI_MSG_PORT_FW_ADD_SUCCESS="‚úÖ C·ªïng '%s' ƒë√£ ƒë∆∞·ª£c th√™m. T·∫£i l·∫°i t∆∞·ªùng l·ª≠a ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi."
VI_MSG_PORT_FW_ADD_FAIL="‚ùå Th√™m c·ªïng '%s' th·∫•t b·∫°i."
VI_PROMPT_PORT_FIREWALL_REMOVE="Nh·∫≠p c·ªïng c·∫ßn x√≥a (v√≠ d·ª•: 8080/tcp): "
VI_INFO_REMOVING_PORT_FW="üîµ ƒêang x√≥a c·ªïng '%s' kh·ªèi t∆∞·ªùng l·ª≠a (vƒ©nh vi·ªÖn)..."
VI_MSG_PORT_FW_REMOVE_SUCCESS="‚úÖ C·ªïng '%s' ƒë√£ ƒë∆∞·ª£c x√≥a. T·∫£i l·∫°i t∆∞·ªùng l·ª≠a ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi."
VI_MSG_PORT_FW_REMOVE_FAIL="‚ùå X√≥a c·ªïng '%s' th·∫•t b·∫°i."
VI_INFO_RELOADING_FIREWALL="üîµ ƒêang t·∫£i l·∫°i t∆∞·ªùng l·ª≠a..."
VI_MSG_FIREWALL_RELOAD_SUCCESS="‚úÖ T∆∞·ªùng l·ª≠a ƒë√£ ƒë∆∞·ª£c t·∫£i l·∫°i th√†nh c√¥ng."
VI_MSG_FIREWALL_RELOAD_FAIL="‚ùå T·∫£i l·∫°i t∆∞·ªùng l·ª≠a th·∫•t b·∫°i."
VI_INFO_LISTING_FIREWALL_RULES="--- C·∫•u h√¨nh T∆∞·ªùng l·ª≠a Hi·ªán t·∫°i ---"


# --- H√ÄM L·∫§Y CHU·ªñI THEO NG√îN NG·ªÆ ---
get_string() {
  local key="$1"
  local var_name
  if [ "$SCRIPT_LANG" == "vi" ]; then
    var_name="VI_$key"
  else
    var_name="EN_$key"
  fi
  printf "%s" "${!var_name}"
}

# --- H√ÄM CH·ªåN NG√îN NG·ªÆ ---
select_language() {
    echo "Choose your language / Ch·ªçn ng√¥n ng·ªØ c·ªßa b·∫°n:"
    echo "1. English"
    echo "2. Ti·∫øng Vi·ªát"
    local choice
    read -r -p "$(get_string "LANG_CHOICE_PROMPT")" choice < /dev/tty
    case "$choice" in
        1) SCRIPT_LANG="en" ;;
        2) SCRIPT_LANG="vi" ;;
        *) SCRIPT_LANG="en"; echo "$(get_string "LANG_INVALID_CHOICE")" ;;
    esac
    clear
}

# --- KI·ªÇM TRA QUY·ªÄN ROOT ---
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "$(get_string "ACCESS_DENIED")"
        echo "$(get_string "PROMPT_SUDO_RERUN")"
        exit 1
    fi
}

# --- G·ªåI H√ÄM CH·ªåN NG√îN NG·ªÆ V√Ä KI·ªÇM TRA ROOT ---
select_language
check_root

# --- C√ÅC H√ÄM TI·ªÜN √çCH ---
press_enter_to_continue() {
    read -r -p "$(get_string "MSG_PRESS_ENTER_TO_CONTINUE")" < /dev/tty
}

# --- C√ÅC H√ÄM CH·ª®C NƒÇNG CH√çNH ---

# == 1. Th√¥ng tin H·ªá th·ªëng ==
show_system_information() {
    echo "$(get_string "INFO_SYS_INFO_HEADER")"
    echo "  $(get_string "INFO_HOSTNAME") $(hostname)"
    echo "  $(get_string "INFO_OS_VERSION") $(cat /etc/almalinux-release)"
    echo "  $(get_string "INFO_KERNEL_VERSION") $(uname -r)"
    echo "  $(get_string "INFO_UPTIME") $(uptime -p)"
    echo "  $(get_string "INFO_CPU_LOAD") $(uptime | awk -F'load average:' '{ print $2 }' | sed 's/^[ \t]*//')" # Trim leading space
    echo ""
    echo "$(get_string "INFO_DISK_USAGE_HEADER")"
    df -h
    echo ""
    echo "$(get_string "INFO_MEMORY_USAGE_HEADER")"
    free -h
}

# == 2. B·∫£o tr√¨ H·ªá th·ªëng ==
update_system() {
    echo "$(get_string "INFO_UPDATING_SYSTEM")"
    if sudo dnf update -y && sudo dnf upgrade -y; then
        echo "$(get_string "MSG_UPDATE_SUCCESS")"
    else
        echo "$(get_string "MSG_UPDATE_FAIL")"
    fi
}

install_package() {
    local pkg_name
    read -r -p "$(get_string "PROMPT_PKG_NAME_INSTALL")" pkg_name < /dev/tty
    if [ -z "$pkg_name" ]; then
        echo "$(get_string "ERR_PKG_NAME_EMPTY")"
        return
    fi
    printf "$(get_string "INFO_INSTALLING_PKG")\n" "$pkg_name"
    if sudo dnf install -y "$pkg_name"; then
        printf "$(get_string "MSG_PKG_INSTALL_SUCCESS")\n" "$pkg_name"
    else
        printf "$(get_string "MSG_PKG_INSTALL_FAIL")\n" "$pkg_name"
    fi
}

remove_package() {
    local pkg_name
    read -r -p "$(get_string "PROMPT_PKG_NAME_REMOVE")" pkg_name < /dev/tty
    if [ -z "$pkg_name" ]; then
        echo "$(get_string "ERR_PKG_NAME_EMPTY")"
        return
    fi
    printf "$(get_string "INFO_REMOVING_PKG")\n" "$pkg_name"
    if sudo dnf remove -y "$pkg_name"; then
        printf "$(get_string "MSG_PKG_REMOVE_SUCCESS")\n" "$pkg_name"
    else
        printf "$(get_string "MSG_PKG_REMOVE_FAIL")\n" "$pkg_name"
    fi
}

reboot_server() {
    read -r -p "$(get_string "PROMPT_REBOOT_CONFIRM")" confirm < /dev/tty
    if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
        echo "$(get_string "INFO_REBOOTING")"
        sudo reboot
    else
        echo "$(get_string "MSG_REBOOT_CANCELLED")"
    fi
}

shutdown_server() {
    read -r -p "$(get_string "PROMPT_SHUTDOWN_CONFIRM")" confirm < /dev/tty
    if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
        echo "$(get_string "INFO_SHUTTING_DOWN")"
        sudo shutdown now
    else
        echo "$(get_string "MSG_SHUTDOWN_CANCELLED")"
    fi
}

manage_system_maintenance() {
    while true; do
        clear
        echo "=============================================="
        echo "       $(get_string "MENU_CAT_SYS_MAINTENANCE")"
        echo "=============================================="
        echo "1. $(get_string "INFO_UPDATING_SYSTEM" | sed 's/üîµ ƒêang //; s/\.\.\. This may take a while//; s/packages//')" # T√≥m t·∫Øt
        echo "2. $(get_string "PROMPT_PKG_NAME_INSTALL" | sed 's/Enter the name of the //; s/to install: //; s/: //')"
        echo "3. $(get_string "PROMPT_PKG_NAME_REMOVE" | sed 's/Enter the name of the //; s/to remove: //; s/: //')"
        echo "4. $(get_string "PROMPT_REBOOT_CONFIRM" | sed 's/‚ö†Ô∏è  Are you sure you want to //; s/the server now? (y\/N): //; s/? (y\/N): //')"
        echo "5. $(get_string "PROMPT_SHUTDOWN_CONFIRM" | sed 's/‚ö†Ô∏è  Are you sure you want to //; s/the server now? (y\/N): //; s/? (y\/N): //')"
        echo "0. $(get_string "SERVICE_OPT_BACK")" # M∆∞·ª£n chu·ªói "Back to Main Menu"
        echo "=============================================="
        local choice
        read -r -p "$(get_string "PROMPT_ENTER_CHOICE")" choice < /dev/tty

        case $choice in
            1) update_system ;;
            2) install_package ;;
            3) remove_package ;;
            4) reboot_server ;;
            5) shutdown_server ;;
            0) break ;;
            *) echo "$(get_string "ERR_INVALID_OPTION")" ;;
        esac
        press_enter_to_continue
    done
}


# == 3. Qu·∫£n l√Ω D·ªãch v·ª• ==
manage_one_service() {
    local action="$1" # start, stop, restart, status, enable, disable
    local service_name
    read -r -p "$(get_string "PROMPT_SERVICE_NAME")" service_name < /dev/tty
    if [ -z "$service_name" ]; then
        echo "$(get_string "ERR_SERVICE_NAME_EMPTY")"
        return
    fi

    case "$action" in
        start)
            printf "$(get_string "INFO_STARTING_SERVICE")\n" "$service_name"
            if sudo systemctl start "$service_name"; then
                printf "$(get_string "MSG_SERVICE_START_SUCCESS")\n" "$service_name"
            else
                printf "$(get_string "MSG_SERVICE_START_FAIL")\n" "$service_name"
            fi
            ;;
        stop)
            printf "$(get_string "INFO_STOPPING_SERVICE")\n" "$service_name"
            if sudo systemctl stop "$service_name"; then
                printf "$(get_string "MSG_SERVICE_STOP_SUCCESS")\n" "$service_name"
            else
                printf "$(get_string "MSG_SERVICE_STOP_FAIL")\n" "$service_name"
            fi
            ;;
        restart)
            printf "$(get_string "INFO_RESTARTING_SERVICE")\n" "$service_name"
            if sudo systemctl restart "$service_name"; then
                printf "$(get_string "MSG_SERVICE_RESTART_SUCCESS")\n" "$service_name"
            else
                printf "$(get_string "MSG_SERVICE_RESTART_FAIL")\n" "$service_name"
            fi
            ;;
        status)
            printf "$(get_string "INFO_SERVICE_STATUS")\n" "$service_name"
            sudo systemctl status "$service_name"
            ;;
        enable)
            printf "$(get_string "INFO_ENABLING_SERVICE")\n" "$service_name"
            if sudo systemctl enable "$service_name"; then
                printf "$(get_string "MSG_SERVICE_ENABLE_SUCCESS")\n" "$service_name"
            else
                printf "$(get_string "MSG_SERVICE_ENABLE_FAIL")\n" "$service_name"
            fi
            ;;
        disable)
            printf "$(get_string "INFO_DISABLING_SERVICE")\n" "$service_name"
            if sudo systemctl disable "$service_name"; then
                printf "$(get_string "MSG_SERVICE_DISABLE_SUCCESS")\n" "$service_name"
            else
                printf "$(get_string "MSG_SERVICE_DISABLE_FAIL")\n" "$service_name"
            fi
            ;;
    esac
}

manage_services_menu() {
    while true; do
        clear
        echo "=============================================="
        echo "       $(get_string "SERVICE_MENU_HEADER")"
        echo "=============================================="
        echo "$(get_string "SERVICE_OPT_START")"
        echo "$(get_string "SERVICE_OPT_STOP")"
        echo "$(get_string "SERVICE_OPT_RESTART")"
        echo "$(get_string "SERVICE_OPT_STATUS")"
        echo "$(get_string "SERVICE_OPT_ENABLE")"
        echo "$(get_string "SERVICE_OPT_DISABLE")"
        echo "$(get_string "SERVICE_OPT_BACK")"
        echo "=============================================="
        local choice
        read -r -p "$(get_string "PROMPT_ENTER_CHOICE")" choice < /dev/tty

        case $choice in
            1) manage_one_service "start" ;;
            2) manage_one_service "stop" ;;
            3) manage_one_service "restart" ;;
            4) manage_one_service "status" ;;
            5) manage_one_service "enable" ;;
            6) manage_one_service "disable" ;;
            0) break ;;
            *) echo "$(get_string "ERR_INVALID_OPTION")" ;;
        esac
        press_enter_to_continue
    done
}

# == 4. Qu·∫£n l√Ω Ng∆∞·ªùi d√πng ==
add_new_user() {
    local username
    read -r -p "$(get_string "PROMPT_USERNAME_ADD")" username < /dev/tty
    if [ -z "$username" ]; then
        echo "$(get_string "ERR_USERNAME_EMPTY")"
        return
    fi
    printf "$(get_string "INFO_ADDING_USER")\n" "$username"
    if sudo useradd "$username"; then
        printf "$(get_string "MSG_USER_ADD_SUCCESS")\n" "$username"
        local set_pass_now
        read -r -p "$(printf "$(get_string "PROMPT_SET_PASSWORD_NOW")" "$username")" set_pass_now < /dev/tty
        if [[ "$set_pass_now" == "y" || "$set_pass_now" == "Y" ]]; then
            sudo passwd "$username"
        fi
    else
        printf "$(get_string "MSG_USER_ADD_FAIL")\n" "$username"
    fi
}

delete_user() {
    local username
    read -r -p "$(get_string "PROMPT_USERNAME_DELETE")" username < /dev/tty
    if [ -z "$username" ]; then
        echo "$(get_string "ERR_USERNAME_EMPTY")"
        return
    fi
    if [ "$username" == "root" ]; then
        echo "‚ö†Ô∏è  $(get_string "ERR_CANNOT_ADD_ROOT_USER" | sed 's/add/delete/g; s/to docker group//g' )" # T√°i s·ª≠ d·ª•ng v√† ch·ªânh s·ª≠a chu·ªói
        return
    fi
    local confirm_delete
    read -r -p "$(printf "$(get_string "PROMPT_DELETE_USER_CONFIRM")" "$username")" confirm_delete < /dev/tty
    if [[ "$confirm_delete" == "y" || "$confirm_delete" == "Y" ]]; then
        printf "$(get_string "INFO_DELETING_USER")\n" "$username"
        if sudo userdel -r "$username"; then # -r to remove home directory
            printf "$(get_string "MSG_USER_DELETE_SUCCESS")\n" "$username"
        else
            printf "$(get_string "MSG_USER_DELETE_FAIL")\n" "$username"
        fi
    else
        echo "$(get_string "MSG_ACTION_CANCELLED" | sed 's/Docker uninstallation/User deletion/g')" # T√°i s·ª≠ d·ª•ng
    fi
}

add_user_to_sudo() {
    local username
    read -r -p "$(get_string "PROMPT_USERNAME_SUDO")" username < /dev/tty
    if [ -z "$username" ]; then
        echo "$(get_string "ERR_USERNAME_EMPTY")"
        return
    fi
    if [ "$username" == "root" ]; then
        echo "‚ÑπÔ∏è  User 'root' already has all privileges."
        return
    fi
    if id "$username" &>/dev/null; then
        if groups "$username" | grep -q '\bwheel\b'; then
            printf "$(get_string "MSG_USER_ALREADY_SUDO")\n" "$username"
        else
            printf "$(get_string "INFO_ADDING_USER_SUDO")\n" "$username"
            if sudo usermod -aG wheel "$username"; then
                printf "$(get_string "MSG_USER_ADD_SUDO_SUCCESS")\n" "$username"
            else
                printf "$(get_string "MSG_USER_ADD_SUDO_FAIL")\n" "$username"
            fi
        fi
    else
        echo "‚ö†Ô∏è  User '$username' does not exist."
    fi
}

list_local_users() {
    echo "$(get_string "INFO_LISTING_USERS")"
    awk -F':' '$3 >= 1000 && $3 != 65534 {print $1}' /etc/passwd # UID >= 1000 for regular users
}


manage_users_menu() {
    while true; do
        clear
        echo "=============================================="
        echo "       $(get_string "USER_MENU_HEADER")"
        echo "=============================================="
        echo "$(get_string "USER_OPT_ADD")"
        echo "$(get_string "USER_OPT_DELETE")"
        echo "$(get_string "USER_OPT_ADD_SUDO")"
        echo "$(get_string "USER_OPT_LIST")"
        echo "$(get_string "SERVICE_OPT_BACK")" # M∆∞·ª£n chu·ªói "Back to Main Menu"
        echo "=============================================="
        local choice
        read -r -p "$(get_string "PROMPT_ENTER_CHOICE")" choice < /dev/tty

        case $choice in
            1) add_new_user ;;
            2) delete_user ;;
            3) add_user_to_sudo ;;
            4) list_local_users ;;
            0) break ;;
            *) echo "$(get_string "ERR_INVALID_OPTION")" ;;
        esac
        press_enter_to_continue
    done
}

# == 5. Qu·∫£n l√Ω T∆∞·ªùng l·ª≠a (firewalld) ==
check_firewall_status() {
    echo "$(get_string "INFO_FIREWALL_STATUS_HEADER")"
    if sudo systemctl is-active --quiet firewalld; then
        sudo firewall-cmd --state
        echo "--- $(get_string "EN_INFO_LISTING_FIREWALL_RULES" | sed 's/Current Firewall Configuration/Active Zone Details/g') ---" # T·∫°m
        sudo firewall-cmd --get-active-zones
        # L·∫•y zone m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ active zone c·ª• th·ªÉ
        local default_zone
        default_zone=$(sudo firewall-cmd --get-default-zone)
        echo "Default zone: $default_zone"
        echo "Services in default zone ($default_zone):"
        sudo firewall-cmd --zone="$default_zone" --list-services
        echo "Ports in default zone ($default_zone):"
        sudo firewall-cmd --zone="$default_zone" --list-ports
    else
        echo "$(get_string "MSG_FIREWALL_NOT_RUNNING")"
    fi
}

add_firewall_service() {
    local service_name
    read -r -p "$(get_string "PROMPT_SERVICE_FIREWALL_ADD")" service_name < /dev/tty
    if [ -z "$service_name" ]; then
        echo "$(get_string "ERR_SERVICE_FW_NAME_EMPTY")"
        return
    fi
    printf "$(get_string "INFO_ADDING_SERVICE_FW")\n" "$service_name"
    if sudo firewall-cmd --permanent --add-service="$service_name"; then
        printf "$(get_string "MSG_SERVICE_FW_ADD_SUCCESS")\n" "$service_name"
    else
        printf "$(get_string "MSG_SERVICE_FW_ADD_FAIL")\n" "$service_name"
    fi
}

remove_firewall_service() {
    local service_name
    read -r -p "$(get_string "PROMPT_SERVICE_FIREWALL_REMOVE")" service_name < /dev/tty
    if [ -z "$service_name" ]; then
        echo "$(get_string "ERR_SERVICE_FW_NAME_EMPTY")" # T√°i s·ª≠ d·ª•ng
        return
    fi
    printf "$(get_string "INFO_REMOVING_SERVICE_FW")\n" "$service_name"
    if sudo firewall-cmd --permanent --remove-service="$service_name"; then
        printf "$(get_string "MSG_SERVICE_FW_REMOVE_SUCCESS")\n" "$service_name"
    else
        printf "$(get_string "MSG_SERVICE_FW_REMOVE_FAIL")\n" "$service_name"
    fi
}

add_firewall_port() {
    local port_proto
    read -r -p "$(get_string "PROMPT_PORT_FIREWALL_ADD")" port_proto < /dev/tty
    if [[ ! "$port_proto" =~ ^[0-9]+/(tcp|udp)$ ]]; then
        echo "$(get_string "ERR_PORT_FW_EMPTY_INVALID")"
        return
    fi
    printf "$(get_string "INFO_ADDING_PORT_FW")\n" "$port_proto"
    if sudo firewall-cmd --permanent --add-port="$port_proto"; then
        printf "$(get_string "MSG_PORT_FW_ADD_SUCCESS")\n" "$port_proto"
    else
        printf "$(get_string "MSG_PORT_FW_ADD_FAIL")\n" "$port_proto"
    fi
}

remove_firewall_port() {
    local port_proto
    read -r -p "$(get_string "PROMPT_PORT_FIREWALL_REMOVE")" port_proto < /dev/tty
     if [[ ! "$port_proto" =~ ^[0-9]+/(tcp|udp)$ ]]; then
        echo "$(get_string "ERR_PORT_FW_EMPTY_INVALID" | sed 's/add/remove/g')" # T√°i s·ª≠ d·ª•ng
        return
    fi
    printf "$(get_string "INFO_REMOVING_PORT_FW")\n" "$port_proto"
    if sudo firewall-cmd --permanent --remove-port="$port_proto"; then
        printf "$(get_string "MSG_PORT_FW_REMOVE_SUCCESS")\n" "$port_proto"
    else
        printf "$(get_string "MSG_PORT_FW_REMOVE_FAIL")\n" "$port_proto"
    fi
}

reload_firewall() {
    echo "$(get_string "INFO_RELOADING_FIREWALL")"
    if sudo firewall-cmd --reload; then
        echo "$(get_string "MSG_FIREWALL_RELOAD_SUCCESS")"
    else
        echo "$(get_string "MSG_FIREWALL_RELOAD_FAIL")"
    fi
}

list_firewall_rules() {
    echo "$(get_string "INFO_LISTING_FIREWALL_RULES")"
    echo "--- Active Zones ---"
    sudo firewall-cmd --get-active-zones
    echo ""
    echo "--- Default Zone ---"
    sudo firewall-cmd --get-default-zone
    echo ""
    echo "--- All Zones Configuration ---"
    sudo firewall-cmd --list-all-zones | grep -E '^[a-zA-Z]|services:|ports:' --color=never
}


manage_firewall_menu() {
     while true; do
        clear
        echo "=============================================="
        echo "       $(get_string "FIREWALL_MENU_HEADER")"
        echo "=============================================="
        echo "$(get_string "FIREWALL_OPT_STATUS")"
        echo "$(get_string "FIREWALL_OPT_ADD_SERVICE")"
        echo "$(get_string "FIREWALL_OPT_REMOVE_SERVICE")"
        echo "$(get_string "FIREWALL_OPT_ADD_PORT")"
        echo "$(get_string "FIREWALL_OPT_REMOVE_PORT")"
        echo "$(get_string "FIREWALL_OPT_RELOAD")"
        echo "$(get_string "FIREWALL_OPT_LIST_ALL")"
        echo "$(get_string "SERVICE_OPT_BACK")" # M∆∞·ª£n chu·ªói "Back to Main Menu"
        echo "=============================================="
        local choice
        read -r -p "$(get_string "PROMPT_ENTER_CHOICE")" choice < /dev/tty

        case $choice in
            1) check_firewall_status ;;
            2) add_firewall_service ;;
            3) remove_firewall_service ;;
            4) add_firewall_port ;;
            5) remove_firewall_port ;;
            6) reload_firewall ;;
            7) list_firewall_rules ;;
            0) break ;;
            *) echo "$(get_string "ERR_INVALID_OPTION")" ;;
        esac
        press_enter_to_continue
    done
}


# --- MENU CH√çNH ---
main_menu() {
    while true; do
        clear
        echo "=============================================="
        echo "$(get_string "MAIN_MENU_HEADER")"
        echo "=============================================="
        echo "$(get_string "MENU_CAT_SYS_INFO")"
        echo "$(get_string "MENU_CAT_SYS_MAINTENANCE")"
        echo "$(get_string "MENU_CAT_SERVICE_MGMT")"
        echo "$(get_string "MENU_CAT_USER_MGMT")"
        echo "$(get_string "MENU_CAT_FIREWALL_MGMT")"
        echo ""
        echo "$(get_string "MENU_OPT_EXIT")"
        echo "=============================================="
        local choice
        read -r -p "$(get_string "PROMPT_ENTER_CHOICE")" choice < /dev/tty

        case $choice in
            1) show_system_information ;;
            2) manage_system_maintenance ;;
            3) manage_services_menu ;;
            4) manage_users_menu ;;
            5) manage_firewall_menu ;;
            0) echo "$(get_string "MSG_EXITING")"; exit 0 ;;
            *) echo "$(get_string "ERR_INVALID_OPTION")" ;;
        esac
        press_enter_to_continue
    done
}

# --- B·∫ÆT ƒê·∫¶U K·ªäCH B·∫¢N ---
main_menu