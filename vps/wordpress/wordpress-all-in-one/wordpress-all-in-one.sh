#!/bin/bash

# K·ªãch b·∫£n WordPress All-In-One cho AlmaLinux 8.10
# Phi√™n b·∫£n: 1.0
# H·ªó tr·ª£ ƒëa ng√¥n ng·ªØ: Ti·∫øng Vi·ªát, Ti·∫øng Anh

# --- BI·∫æN NG√îN NG·ªÆ TO√ÄN C·ª§C ---
SCRIPT_LANG="en" # M·∫∑c ƒë·ªãnh l√† Ti·∫øng Anh
WEB_USER="nginx" # Ng∆∞·ªùi d√πng m√† Nginx ch·∫°y (v√† WordPress files n√™n thu·ªôc s·ªü h·ªØu)
WEB_GROUP="nginx"

# --- ƒê·ªäNH NGHƒ®A CHU·ªñI VƒÇN B·∫¢N (TI·∫æNG ANH) ---
EN_ACCESS_DENIED="ERROR: This script must be run with root or sudo privileges."
EN_PROMPT_SUDO_RERUN="Please try again with: sudo \$0"
EN_LANG_CHOICE_PROMPT="Enter your choice (1-2): "
EN_LANG_INVALID_CHOICE="Invalid choice, defaulting to English."

EN_MAIN_MENU_HEADER="     üõ†Ô∏è WordPress All-In-One Toolkit (AlmaLinux 8.10) üõ†Ô∏è     "
EN_MENU_OPT_LEMP_SETUP="1. Setup LEMP Stack (Nginx, MariaDB, PHP)"
EN_MENU_OPT_WPCLI_MGMT="2. Manage WP-CLI (WordPress Command Line Interface)"
EN_MENU_OPT_NEW_WP_SITE="3. Install New WordPress Site"
EN_MENU_OPT_BACKUP_WP_SITE="4. Backup WordPress Site"
EN_MENU_OPT_RESTORE_WP_SITE="5. Restore WordPress Site"
EN_MENU_OPT_UPDATE_WP="6. Update WordPress (Core, Plugins, Themes)"
EN_MENU_OPT_MAINTENANCE_MODE="7. Manage Maintenance Mode"
EN_MENU_OPT_RUN_WPCLI_CMD="8. Run Custom WP-CLI Command"
EN_MENU_OPT_SETUP_SSL="9. Setup SSL with Let's Encrypt (Certbot)"
EN_MENU_OPT_DELETE_WP_SITE="10. Delete WordPress Site (USE WITH CAUTION!)"
EN_MENU_OPT_EXIT="0. Exit"
EN_PROMPT_ENTER_CHOICE="Please select an option: "
EN_ERR_INVALID_OPTION="‚ö†Ô∏è  Invalid option. Please try again."
EN_MSG_PRESS_ENTER_TO_CONTINUE="Press Enter to continue..."
EN_MSG_EXITING="üëã  Exiting WordPress Toolkit!"
EN_MSG_FEATURE_NOT_FULLY_IMPLEMENTED="‚ÑπÔ∏è This feature is planned. Stay tuned for updates." # Placeholder

# LEMP Setup
EN_INFO_INSTALLING_LEMP="üîµ Installing LEMP Stack (Nginx, MariaDB, PHP)... This may take some time."
EN_INFO_NGINX_INSTALLED="Nginx installed and enabled."
EN_INFO_MARIADB_INSTALLED="MariaDB installed and enabled. Remember to run 'sudo mysql_secure_installation'."
EN_INFO_PHP_INSTALLED="PHP (with FPM and extensions) installed and configured for Nginx."
EN_MSG_LEMP_INSTALL_SUCCESS="‚úÖ LEMP Stack installation completed."
EN_MSG_LEMP_INSTALL_FAIL="‚ùå LEMP Stack installation failed or some components failed."
EN_PROMPT_PHP_VERSION="Select PHP version to install (e.g., 8.0, 8.1, 8.2 - check availability for AlmaLinux 8): Default [8.1]: "

# WP-CLI
EN_WPCLI_MENU_HEADER="--- WP-CLI Management ---"
EN_WPCLI_OPT_INSTALL="1. Install/Update WP-CLI"
EN_WPCLI_OPT_CHECK_VERSION="2. Check WP-CLI Version"
EN_WPCLI_OPT_UNINSTALL="3. Uninstall WP-CLI"
EN_WPCLI_OPT_BACK="0. Back to Main Menu"
EN_INFO_INSTALLING_WPCLI="üîµ Installing/Updating WP-CLI to /usr/local/bin/wp..."
EN_MSG_WPCLI_INSTALL_SUCCESS="‚úÖ WP-CLI installed/updated successfully."
EN_MSG_WPCLI_INSTALL_FAIL="‚ùå Failed to install/update WP-CLI."
EN_MSG_WPCLI_NOT_INSTALLED="‚ö†Ô∏è WP-CLI is not installed. Please install it first."
EN_INFO_UNINSTALLING_WPCLI="üîµ Uninstalling WP-CLI..."
EN_MSG_WPCLI_UNINSTALL_SUCCESS="‚úÖ WP-CLI uninstalled successfully."
EN_MSG_WPCLI_UNINSTALL_FAIL="‚ùå Failed to uninstall WP-CLI (or it was not found)."

# WordPress Install
EN_PROMPT_DOMAIN_NAME="Enter domain name for the new WordPress site (e.g., example.com): "
EN_ERR_DOMAIN_EMPTY="‚ö†Ô∏è Domain name cannot be empty."
EN_PROMPT_WP_PATH="Enter the full web root path for this site (e.g., /var/www/example.com): "
EN_ERR_WP_PATH_EMPTY="‚ö†Ô∏è WordPress path cannot be empty."
EN_ERR_WP_PATH_EXISTS="‚ö†Ô∏è Path '%s' already exists. Please choose a different path or delete existing."
EN_PROMPT_DB_NAME="Enter database name for WordPress (e.g., wp_example): "
EN_PROMPT_DB_USER="Enter database user for WordPress (e.g., wp_user): "
EN_PROMPT_DB_PASS="Enter database password for WordPress user (leave blank for auto-generated): "
EN_INFO_GENERATING_DB_PASS="‚ÑπÔ∏è Auto-generating a strong database password."
EN_INFO_CREATING_DB="üîµ Creating MariaDB database '%s' and user '%s'..."
EN_MSG_DB_CREATE_SUCCESS="‚úÖ Database and user created successfully."
EN_MSG_DB_PASS_GENERATED="   Generated DB Password: %s (SAVE THIS SECURELY!)"
EN_MSG_DB_CREATE_FAIL="‚ùå Failed to create database or user."
EN_INFO_DOWNLOADING_WP="üîµ Downloading latest WordPress core files..."
EN_MSG_WP_DOWNLOAD_SUCCESS="‚úÖ WordPress downloaded successfully."
EN_MSG_WP_DOWNLOAD_FAIL="‚ùå Failed to download WordPress."
EN_INFO_CONFIGURING_WP="üîµ Configuring wp-config.php..."
EN_MSG_WP_CONFIG_SUCCESS="‚úÖ wp-config.php configured successfully."
EN_MSG_WP_CONFIG_FAIL="‚ùå Failed to configure wp-config.php."
EN_INFO_SETTING_PERMISSIONS="üîµ Setting file and directory permissions for WordPress..."
EN_INFO_CONFIGURING_NGINX="üîµ Configuring Nginx server block for %s..."
EN_MSG_NGINX_CONFIG_SUCCESS="‚úÖ Nginx server block created for %s. Please point your domain's DNS to this server's IP."
EN_MSG_NGINX_CONFIG_FAIL="‚ùå Failed to create Nginx server block for %s."
EN_MSG_WP_INSTALL_COMPLETE_TITLE="üéâ WordPress Installation Complete for %s! üéâ"
EN_MSG_WP_INSTALL_COMPLETE_NEXT_STEPS="   Next steps:"
EN_MSG_WP_INSTALL_COMPLETE_DNS="   1. Ensure your domain '%s' points to this server's IP address: %s"
EN_MSG_WP_INSTALL_COMPLETE_BROWSER="   2. Open http://%s in your browser to complete the WordPress setup (language, site title, admin user)."
EN_MSG_WP_INSTALL_COMPLETE_SSL="   3. Consider setting up SSL using option 9 in the main menu."

# Backup & Restore
EN_PROMPT_SITE_PATH_BACKUP="Enter the full web root path of the WordPress site to backup: "
EN_PROMPT_BACKUP_DIR="Enter the directory path to store backups (e.g., /var/backups/wordpress): "
EN_ERR_SITE_PATH_NOT_WP="‚ö†Ô∏è Path '%s' does not appear to be a WordPress installation (wp-config.php not found)."
EN_INFO_CREATING_BACKUP_FILES="üîµ Backing up WordPress files for '%s'..."
EN_INFO_CREATING_BACKUP_DB="üîµ Backing up WordPress database for '%s'..."
EN_MSG_BACKUP_SUCCESS="‚úÖ Backup for '%s' completed successfully. Files are in: %s"
EN_MSG_BACKUP_FAIL="‚ùå Backup for '%s' failed."
EN_PROMPT_BACKUP_FILE_FILES_RESTORE="Enter the full path to the WordPress files backup (.tar.gz): "
EN_PROMPT_BACKUP_FILE_DB_RESTORE="Enter the full path to the WordPress database backup (.sql or .sql.gz): "
EN_PROMPT_SITE_PATH_RESTORE="Enter the full web root path of the WordPress site to restore to: "
EN_PROMPT_RESTORE_CONFIRM="‚ö†Ô∏è  This will overwrite existing files and database for the site at '%s'. Are you sure? (y/N): "
EN_INFO_RESTORING_FILES="üîµ Restoring WordPress files to '%s'..."
EN_INFO_RESTORING_DB="üîµ Restoring WordPress database..."
EN_MSG_RESTORE_SUCCESS="‚úÖ WordPress site at '%s' restored successfully."
EN_MSG_RESTORE_FAIL="‚ùå WordPress site restoration failed."

# Update WP
EN_UPDATE_WP_MENU_HEADER="--- WordPress Update Menu ---"
EN_UPDATE_OPT_CORE="1. Update WordPress Core"
EN_UPDATE_OPT_ALL_PLUGINS="2. Update All Plugins"
EN_UPDATE_OPT_ALL_THEMES="3. Update All Themes"
EN_PROMPT_SITE_PATH_FOR_WPCLI="Enter the WordPress site path for WP-CLI commands: "
EN_INFO_UPDATING_WP_CORE="üîµ Updating WordPress Core for site at '%s'..."
EN_INFO_UPDATING_ALL_PLUGINS="üîµ Updating all plugins for site at '%s'..."
EN_INFO_UPDATING_ALL_THEMES="üîµ Updating all themes for site at '%s'..."
EN_MSG_WPCLI_SUCCESS="‚úÖ WP-CLI command executed successfully."
EN_MSG_WPCLI_FAIL="‚ùå WP-CLI command failed."

# Maintenance Mode
EN_PROMPT_MAINTENANCE_ACTION="Select action: (1 for Enable, 2 for Disable): "
EN_INFO_ENABLING_MAINTENANCE="üîµ Enabling maintenance mode for site at '%s'..."
EN_INFO_DISABLING_MAINTENANCE="üîµ Disabling maintenance mode for site at '%s'..."
EN_MSG_MAINTENANCE_ENABLED="‚úÖ Maintenance mode enabled."
EN_MSG_MAINTENANCE_DISABLED="‚úÖ Maintenance mode disabled."

# Run WP-CLI
EN_PROMPT_WPCLI_COMMAND="Enter the WP-CLI command to run (e.g., 'plugin list --status=active'): "
EN_INFO_RUNNING_WPCLI_COMMAND="üîµ Running WP-CLI command for site at '%s': wp %s"

# SSL (Certbot)
EN_INFO_INSTALLING_CERTBOT="üîµ Installing Certbot and Nginx plugin..."
EN_MSG_CERTBOT_INSTALL_SUCCESS="‚úÖ Certbot installed successfully."
EN_MSG_CERTBOT_INSTALL_FAIL="‚ùå Failed to install Certbot."
EN_PROMPT_DOMAIN_FOR_SSL="Enter the domain name for SSL setup (must be live and pointing to this server): "
EN_PROMPT_EMAIL_FOR_SSL="Enter your email address for Let's Encrypt registration and recovery: "
EN_INFO_REQUESTING_SSL_CERT="üîµ Requesting SSL certificate for %s via Certbot..."
EN_MSG_SSL_SETUP_SUCCESS="‚úÖ SSL certificate obtained and configured for %s successfully!"
EN_MSG_SSL_SETUP_FAIL="‚ùå SSL certificate setup failed for %s."

# Delete WP
EN_PROMPT_SITE_PATH_DELETE="Enter the full web root path of the WordPress site to DELETE: "
EN_PROMPT_DELETE_WP_CONFIRM1="‚ö†Ô∏è  EXTREME CAUTION! This will PERMANENTLY DELETE all files for the site at '%s'."
EN_PROMPT_DELETE_WP_CONFIRM2="   It will also attempt to delete the Nginx config and the associated database and user."
EN_PROMPT_DELETE_WP_CONFIRM3="   There is NO UNDO. Type 'YESIDOITTODELETE' to confirm: " # Extra confirmation
EN_INFO_DELETING_WP_FILES="üîµ Deleting WordPress files at '%s'..."
EN_INFO_DELETING_NGINX_CONF="üîµ Deleting Nginx configuration for the site..."
EN_INFO_DELETING_DB_USER="üîµ Deleting database '%s' and user '%s'..."
EN_MSG_WP_DELETE_COMPLETE="‚úÖ WordPress site '%s' has been deleted."
EN_MSG_WP_DELETE_ABORTED="‚ÑπÔ∏è  WordPress site deletion aborted."


# --- ƒê·ªäNH NGHƒ®A CHU·ªñI VƒÇN B·∫¢N (TI·∫æNG VI·ªÜT) ---
VI_ACCESS_DENIED="‚ö†Ô∏è  L·ªñI: K·ªãch b·∫£n n√†y c·∫ßn ƒë∆∞·ª£c ch·∫°y v·ªõi quy·ªÅn root ho·∫∑c sudo."
VI_PROMPT_SUDO_RERUN="Vui l√≤ng ch·∫°y l·∫°i v·ªõi l·ªánh: sudo \$0"
VI_LANG_CHOICE_PROMPT="Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1-2): "
VI_LANG_INVALID_CHOICE="L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, m·∫∑c ƒë·ªãnh Ti·∫øng Anh."

VI_MAIN_MENU_HEADER="     üõ†Ô∏è B·ªô C√¥ng C·ª• WordPress To√†n Di·ªán (AlmaLinux 8.10) üõ†Ô∏è     "
VI_MENU_OPT_LEMP_SETUP="1. C√†i ƒë·∫∑t LEMP Stack (Nginx, MariaDB, PHP)"
VI_MENU_OPT_WPCLI_MGMT="2. Qu·∫£n l√Ω WP-CLI (Giao di·ªán d√≤ng l·ªánh WordPress)"
VI_MENU_OPT_NEW_WP_SITE="3. C√†i ƒë·∫∑t Trang WordPress M·ªõi"
VI_MENU_OPT_BACKUP_WP_SITE="4. Sao l∆∞u Trang WordPress"
VI_MENU_OPT_RESTORE_WP_SITE="5. Ph·ª•c h·ªìi Trang WordPress"
VI_MENU_OPT_UPDATE_WP="6. C·∫≠p nh·∫≠t WordPress (Core, Plugins, Themes)"
VI_MENU_OPT_MAINTENANCE_MODE="7. Qu·∫£n l√Ω Ch·∫ø ƒë·ªô B·∫£o tr√¨"
VI_MENU_OPT_RUN_WPCLI_CMD="8. Ch·∫°y L·ªánh WP-CLI T√πy ch·ªânh"
VI_MENU_OPT_SETUP_SSL="9. C√†i ƒë·∫∑t SSL v·ªõi Let's Encrypt (Certbot)"
VI_MENU_OPT_DELETE_WP_SITE="10. X√≥a Trang WordPress (C·∫®N TH·∫¨N TUY·ªÜT ƒê·ªêI!)"
VI_MENU_OPT_EXIT="0. Tho√°t"
VI_PROMPT_ENTER_CHOICE="Vui l√≤ng ch·ªçn m·ªôt t√πy ch·ªçn: "
VI_ERR_INVALID_OPTION="‚ö†Ô∏è  L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i."
VI_MSG_PRESS_ENTER_TO_CONTINUE="Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c..."
VI_MSG_EXITING="üëã  Tho√°t B·ªô c√¥ng c·ª• WordPress!"
VI_MSG_FEATURE_NOT_FULLY_IMPLEMENTED="‚ÑπÔ∏è T√≠nh nƒÉng n√†y ƒëang ƒë∆∞·ª£c l√™n k·∫ø ho·∫°ch. Vui l√≤ng ch·ªù c·∫≠p nh·∫≠t." # Placeholder

# LEMP Setup
VI_INFO_INSTALLING_LEMP="üîµ ƒêang c√†i ƒë·∫∑t LEMP Stack (Nginx, MariaDB, PHP)... Vi·ªác n√†y c√≥ th·ªÉ m·∫•t m·ªôt l√∫c."
VI_INFO_NGINX_INSTALLED="Nginx ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† k√≠ch ho·∫°t."
VI_INFO_MARIADB_INSTALLED="MariaDB ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† k√≠ch ho·∫°t. H√£y nh·ªõ ch·∫°y 'sudo mysql_secure_installation'."
VI_INFO_PHP_INSTALLED="PHP (v·ªõi FPM v√† c√°c extension) ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† c·∫•u h√¨nh cho Nginx."
VI_MSG_LEMP_INSTALL_SUCCESS="‚úÖ C√†i ƒë·∫∑t LEMP Stack ho√†n t·∫•t."
VI_MSG_LEMP_INSTALL_FAIL="‚ùå C√†i ƒë·∫∑t LEMP Stack th·∫•t b·∫°i ho·∫∑c m·ªôt s·ªë th√†nh ph·∫ßn b·ªã l·ªói."
VI_PROMPT_PHP_VERSION="Ch·ªçn phi√™n b·∫£n PHP ƒë·ªÉ c√†i ƒë·∫∑t (v√≠ d·ª•: 8.0, 8.1, 8.2 - ki·ªÉm tra t√≠nh kh·∫£ d·ª•ng cho AlmaLinux 8): M·∫∑c ƒë·ªãnh [8.1]: "

# WP-CLI
VI_WPCLI_MENU_HEADER="--- Qu·∫£n l√Ω WP-CLI ---"
VI_WPCLI_OPT_INSTALL="1. C√†i ƒë·∫∑t/C·∫≠p nh·∫≠t WP-CLI"
VI_WPCLI_OPT_CHECK_VERSION="2. Ki·ªÉm tra Phi√™n b·∫£n WP-CLI"
VI_WPCLI_OPT_UNINSTALL="3. G·ª° c√†i ƒë·∫∑t WP-CLI"
VI_WPCLI_OPT_BACK="0. Quay l·∫°i Menu Ch√≠nh"
VI_INFO_INSTALLING_WPCLI="üîµ ƒêang c√†i ƒë·∫∑t/c·∫≠p nh·∫≠t WP-CLI v√†o /usr/local/bin/wp..."
VI_MSG_WPCLI_INSTALL_SUCCESS="‚úÖ WP-CLI ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t/c·∫≠p nh·∫≠t th√†nh c√¥ng."
VI_MSG_WPCLI_INSTALL_FAIL="‚ùå C√†i ƒë·∫∑t/c·∫≠p nh·∫≠t WP-CLI th·∫•t b·∫°i."
VI_MSG_WPCLI_NOT_INSTALLED="‚ö†Ô∏è WP-CLI ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t tr∆∞·ªõc."
VI_INFO_UNINSTALLING_WPCLI="üîµ ƒêang g·ª° c√†i ƒë·∫∑t WP-CLI..."
VI_MSG_WPCLI_UNINSTALL_SUCCESS="‚úÖ WP-CLI ƒë√£ ƒë∆∞·ª£c g·ª° c√†i ƒë·∫∑t th√†nh c√¥ng."
VI_MSG_WPCLI_UNINSTALL_FAIL="‚ùå G·ª° c√†i ƒë·∫∑t WP-CLI th·∫•t b·∫°i (ho·∫∑c kh√¥ng t√¨m th·∫•y)."

# WordPress Install
VI_PROMPT_DOMAIN_NAME="Nh·∫≠p t√™n mi·ªÅn cho trang WordPress m·ªõi (v√≠ d·ª•: example.com): "
VI_ERR_DOMAIN_EMPTY="‚ö†Ô∏è T√™n mi·ªÅn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."
VI_PROMPT_WP_PATH="Nh·∫≠p ƒë∆∞·ªùng d·∫´n web root ƒë·∫ßy ƒë·ªß cho trang n√†y (v√≠ d·ª•: /var/www/example.com): "
VI_ERR_WP_PATH_EMPTY="‚ö†Ô∏è ƒê∆∞·ªùng d·∫´n WordPress kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."
VI_ERR_WP_PATH_EXISTS="‚ö†Ô∏è ƒê∆∞·ªùng d·∫´n '%s' ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn ƒë∆∞·ªùng d·∫´n kh√°c ho·∫∑c x√≥a c√°i hi·ªán c√≥."
VI_PROMPT_DB_NAME="Nh·∫≠p t√™n database cho WordPress (v√≠ d·ª•: wp_example): "
VI_PROMPT_DB_USER="Nh·∫≠p user database cho WordPress (v√≠ d·ª•: wp_user): "
VI_PROMPT_DB_PASS="Nh·∫≠p m·∫≠t kh·∫©u database cho user WordPress (ƒë·ªÉ tr·ªëng ƒë·ªÉ t·ª± ƒë·ªông t·∫°o): "
VI_INFO_GENERATING_DB_PASS="‚ÑπÔ∏è ƒêang t·ª± ƒë·ªông t·∫°o m·∫≠t kh·∫©u database m·∫°nh."
VI_INFO_CREATING_DB="üîµ ƒêang t·∫°o database MariaDB '%s' v√† user '%s'..."
VI_MSG_DB_CREATE_SUCCESS="‚úÖ Database v√† user ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng."
VI_MSG_DB_PASS_GENERATED="   M·∫≠t kh·∫©u DB ƒë∆∞·ª£c t·∫°o: %s (L∆ØU L·∫†I C·∫®N TH·∫¨N!)"
VI_MSG_DB_CREATE_FAIL="‚ùå T·∫°o database ho·∫∑c user th·∫•t b·∫°i."
VI_INFO_DOWNLOADING_WP="üîµ ƒêang t·∫£i xu·ªëng phi√™n b·∫£n WordPress m·ªõi nh·∫•t..."
VI_MSG_WP_DOWNLOAD_SUCCESS="‚úÖ T·∫£i xu·ªëng WordPress th√†nh c√¥ng."
VI_MSG_WP_DOWNLOAD_FAIL="‚ùå T·∫£i xu·ªëng WordPress th·∫•t b·∫°i."
VI_INFO_CONFIGURING_WP="üîµ ƒêang c·∫•u h√¨nh wp-config.php..."
VI_MSG_WP_CONFIG_SUCCESS="‚úÖ wp-config.php ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng."
VI_MSG_WP_CONFIG_FAIL="‚ùå C·∫•u h√¨nh wp-config.php th·∫•t b·∫°i."
VI_INFO_SETTING_PERMISSIONS="üîµ ƒêang thi·∫øt l·∫≠p quy·ªÅn cho file v√† th∆∞ m·ª•c WordPress..."
VI_INFO_CONFIGURING_NGINX="üîµ ƒêang c·∫•u h√¨nh Nginx server block cho %s..."
VI_MSG_NGINX_CONFIG_SUCCESS="‚úÖ Nginx server block ƒë√£ ƒë∆∞·ª£c t·∫°o cho %s. Vui l√≤ng tr·ªè DNS c·ªßa t√™n mi·ªÅn v·ªÅ IP c·ªßa m√°y ch·ªß n√†y."
VI_MSG_NGINX_CONFIG_FAIL="‚ùå T·∫°o Nginx server block cho %s th·∫•t b·∫°i."
VI_MSG_WP_INSTALL_COMPLETE_TITLE="üéâ C√†i ƒë·∫∑t WordPress cho %s Ho√†n t·∫•t! üéâ"
VI_MSG_WP_INSTALL_COMPLETE_NEXT_STEPS="   C√°c b∆∞·ªõc ti·∫øp theo:"
VI_MSG_WP_INSTALL_COMPLETE_DNS="   1. ƒê·∫£m b·∫£o t√™n mi·ªÅn '%s' c·ªßa b·∫°n tr·ªè v·ªÅ ƒë·ªãa ch·ªâ IP c·ªßa m√°y ch·ªß n√†y: %s"
VI_MSG_WP_INSTALL_COMPLETE_BROWSER="   2. M·ªü http://%s trong tr√¨nh duy·ªát ƒë·ªÉ ho√†n t·∫•t c√†i ƒë·∫∑t WordPress (ng√¥n ng·ªØ, ti√™u ƒë·ªÅ trang, user admin)."
VI_MSG_WP_INSTALL_COMPLETE_SSL="   3. C√¢n nh·∫Øc c√†i ƒë·∫∑t SSL b·∫±ng t√πy ch·ªçn 9 trong menu ch√≠nh."

# Backup & Restore
VI_PROMPT_SITE_PATH_BACKUP="Nh·∫≠p ƒë∆∞·ªùng d·∫´n web root ƒë·∫ßy ƒë·ªß c·ªßa trang WordPress c·∫ßn sao l∆∞u: "
VI_PROMPT_BACKUP_DIR="Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c ƒë·ªÉ l∆∞u tr·ªØ b·∫£n sao l∆∞u (v√≠ d·ª•: /var/backups/wordpress): "
VI_ERR_SITE_PATH_NOT_WP="‚ö†Ô∏è ƒê∆∞·ªùng d·∫´n '%s' kh√¥ng gi·ªëng m·ªôt c√†i ƒë·∫∑t WordPress (kh√¥ng t√¨m th·∫•y wp-config.php)."
VI_INFO_CREATING_BACKUP_FILES="üîµ ƒêang sao l∆∞u file WordPress cho '%s'..."
VI_INFO_CREATING_BACKUP_DB="üîµ ƒêang sao l∆∞u database WordPress cho '%s'..."
VI_MSG_BACKUP_SUCCESS="‚úÖ Sao l∆∞u cho '%s' ho√†n t·∫•t. File ƒë∆∞·ª£c l∆∞u t·∫°i: %s"
VI_MSG_BACKUP_FAIL="‚ùå Sao l∆∞u cho '%s' th·∫•t b·∫°i."
VI_PROMPT_BACKUP_FILE_FILES_RESTORE="Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file sao l∆∞u file WordPress (.tar.gz): "
VI_PROMPT_BACKUP_FILE_DB_RESTORE="Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file sao l∆∞u database WordPress (.sql ho·∫∑c .sql.gz): "
VI_PROMPT_SITE_PATH_RESTORE="Nh·∫≠p ƒë∆∞·ªùng d·∫´n web root ƒë·∫ßy ƒë·ªß c·ªßa trang WordPress c·∫ßn ph·ª•c h·ªìi: "
VI_PROMPT_RESTORE_CONFIRM="‚ö†Ô∏è  Thao t√°c n√†y s·∫Ω ghi ƒë√® file v√† database hi·ªán t·∫°i c·ªßa trang t·∫°i '%s'. B·∫°n c√≥ ch·∫Øc ch·∫Øn kh√¥ng? (y/N): "
VI_INFO_RESTORING_FILES="üîµ ƒêang ph·ª•c h·ªìi file WordPress t·ªõi '%s'..."
VI_INFO_RESTORING_DB="üîµ ƒêang ph·ª•c h·ªìi database WordPress..."
VI_MSG_RESTORE_SUCCESS="‚úÖ Trang WordPress t·∫°i '%s' ƒë√£ ƒë∆∞·ª£c ph·ª•c h·ªìi th√†nh c√¥ng."
VI_MSG_RESTORE_FAIL="‚ùå Ph·ª•c h·ªìi trang WordPress th·∫•t b·∫°i."

# Update WP
VI_UPDATE_WP_MENU_HEADER="--- Menu C·∫≠p nh·∫≠t WordPress ---"
VI_UPDATE_OPT_CORE="1. C·∫≠p nh·∫≠t WordPress Core"
VI_UPDATE_OPT_ALL_PLUGINS="2. C·∫≠p nh·∫≠t T·∫•t c·∫£ Plugins"
VI_UPDATE_OPT_ALL_THEMES="3. C·∫≠p nh·∫≠t T·∫•t c·∫£ Themes"
VI_PROMPT_SITE_PATH_FOR_WPCLI="Nh·∫≠p ƒë∆∞·ªùng d·∫´n trang WordPress cho l·ªánh WP-CLI: "
VI_INFO_UPDATING_WP_CORE="üîµ ƒêang c·∫≠p nh·∫≠t WordPress Core cho trang t·∫°i '%s'..."
VI_INFO_UPDATING_ALL_PLUGINS="üîµ ƒêang c·∫≠p nh·∫≠t t·∫•t c·∫£ plugin cho trang t·∫°i '%s'..."
VI_INFO_UPDATING_ALL_THEMES="üîµ ƒêang c·∫≠p nh·∫≠t t·∫•t c·∫£ theme cho trang t·∫°i '%s'..."
VI_MSG_WPCLI_SUCCESS="‚úÖ L·ªánh WP-CLI th·ª±c thi th√†nh c√¥ng."
VI_MSG_WPCLI_FAIL="‚ùå L·ªánh WP-CLI th·∫•t b·∫°i."

# Maintenance Mode
VI_PROMPT_MAINTENANCE_ACTION="Ch·ªçn h√†nh ƒë·ªông: (1 ƒë·ªÉ B·∫≠t, 2 ƒë·ªÉ T·∫Øt): "
VI_INFO_ENABLING_MAINTENANCE="üîµ ƒêang b·∫≠t ch·∫ø ƒë·ªô b·∫£o tr√¨ cho trang t·∫°i '%s'..."
VI_INFO_DISABLING_MAINTENANCE="üîµ ƒêang t·∫Øt ch·∫ø ƒë·ªô b·∫£o tr√¨ cho trang t·∫°i '%s'..."
VI_MSG_MAINTENANCE_ENABLED="‚úÖ Ch·∫ø ƒë·ªô b·∫£o tr√¨ ƒë√£ ƒë∆∞·ª£c b·∫≠t."
VI_MSG_MAINTENANCE_DISABLED="‚úÖ Ch·∫ø ƒë·ªô b·∫£o tr√¨ ƒë√£ ƒë∆∞·ª£c t·∫Øt."

# Run WP-CLI
VI_PROMPT_WPCLI_COMMAND="Nh·∫≠p l·ªánh WP-CLI c·∫ßn ch·∫°y (v√≠ d·ª•: 'plugin list --status=active'): "
VI_INFO_RUNNING_WPCLI_COMMAND="üîµ ƒêang ch·∫°y l·ªánh WP-CLI cho trang t·∫°i '%s': wp %s"

# SSL (Certbot)
VI_INFO_INSTALLING_CERTBOT="üîµ ƒêang c√†i ƒë·∫∑t Certbot v√† plugin Nginx..."
VI_MSG_CERTBOT_INSTALL_SUCCESS="‚úÖ Certbot ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng."
VI_MSG_CERTBOT_INSTALL_FAIL="‚ùå C√†i ƒë·∫∑t Certbot th·∫•t b·∫°i."
VI_PROMPT_DOMAIN_FOR_SSL="Nh·∫≠p t√™n mi·ªÅn ƒë·ªÉ c√†i ƒë·∫∑t SSL (ph·∫£i ƒëang ho·∫°t ƒë·ªông v√† tr·ªè v·ªÅ m√°y ch·ªß n√†y): "
VI_PROMPT_EMAIL_FOR_SSL="Nh·∫≠p ƒë·ªãa ch·ªâ email c·ªßa b·∫°n ƒë·ªÉ ƒëƒÉng k√Ω Let's Encrypt v√† kh√¥i ph·ª•c: "
VI_INFO_REQUESTING_SSL_CERT="üîµ ƒêang y√™u c·∫ßu ch·ª©ng ch·ªâ SSL cho %s qua Certbot..."
VI_MSG_SSL_SETUP_SUCCESS="‚úÖ Ch·ª©ng ch·ªâ SSL ƒë√£ ƒë∆∞·ª£c l·∫•y v√† c·∫•u h√¨nh cho %s th√†nh c√¥ng!"
VI_MSG_SSL_SETUP_FAIL="‚ùå C√†i ƒë·∫∑t ch·ª©ng ch·ªâ SSL cho %s th·∫•t b·∫°i."

# Delete WP
VI_PROMPT_SITE_PATH_DELETE="Nh·∫≠p ƒë∆∞·ªùng d·∫´n web root ƒë·∫ßy ƒë·ªß c·ªßa trang WordPress c·∫ßn X√ìA: "
VI_PROMPT_DELETE_WP_CONFIRM1="‚ö†Ô∏è  C·∫®N TH·∫¨N TUY·ªÜT ƒê·ªêI! Thao t√°c n√†y s·∫Ω X√ìA Vƒ®NH VI·ªÑN t·∫•t c·∫£ file c·ªßa trang t·∫°i '%s'."
VI_PROMPT_DELETE_WP_CONFIRM2="   N√≥ c≈©ng s·∫Ω c·ªë g·∫Øng x√≥a c·∫•u h√¨nh Nginx v√† database c≈©ng nh∆∞ user li√™n quan."
VI_PROMPT_DELETE_WP_CONFIRM3="   KH√îNG C√ì C√ÅCH HO√ÄN T√ÅC. G√µ 'YESIDOITTODELETE' ƒë·ªÉ x√°c nh·∫≠n: "
VI_INFO_DELETING_WP_FILES="üîµ ƒêang x√≥a file WordPress t·∫°i '%s'..."
VI_INFO_DELETING_NGINX_CONF="üîµ ƒêang x√≥a c·∫•u h√¨nh Nginx cho trang..."
VI_INFO_DELETING_DB_USER="üîµ ƒêang x√≥a database '%s' v√† user '%s'..."
VI_MSG_WP_DELETE_COMPLETE="‚úÖ Trang WordPress '%s' ƒë√£ ƒë∆∞·ª£c x√≥a."
VI_MSG_WP_DELETE_ABORTED="‚ÑπÔ∏è  ƒê√£ h·ªßy x√≥a trang WordPress."


# --- H√ÄM L·∫§Y CHU·ªñI THEO NG√îN NG·ªÆ ---
get_string() {
  local key="$1"
  local var_name
  if [ "$SCRIPT_LANG" == "vi" ]; then
    var_name="VI_$key"
  else
    var_name="EN_$key"
  fi
  printf "%s" "${!var_name}"
}

# --- H√ÄM CH·ªåN NG√îN NG·ªÆ ---
select_language() {
    echo "Choose your language / Ch·ªçn ng√¥n ng·ªØ c·ªßa b·∫°n:"
    echo "1. English"
    echo "2. Ti·∫øng Vi·ªát"
    local choice
    read -r -p "$(get_string "LANG_CHOICE_PROMPT")" choice < /dev/tty
    case "$choice" in
        1) SCRIPT_LANG="en" ;;
        2) SCRIPT_LANG="vi" ;;
        *) SCRIPT_LANG="en"; echo "$(get_string "LANG_INVALID_CHOICE")" ;;
    esac
    clear
}

# --- KI·ªÇM TRA QUY·ªÄN ROOT ---
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "$(get_string "ACCESS_DENIED")"
        echo "$(get_string "PROMPT_SUDO_RERUN")"
        exit 1
    fi
}

# --- G·ªåI H√ÄM CH·ªåN NG√îN NG·ªÆ V√Ä KI·ªÇM TRA ROOT ---
select_language
check_root

# --- C√ÅC H√ÄM TI·ªÜN √çCH ---
press_enter_to_continue() {
    read -r -p "$(get_string "MSG_PRESS_ENTER_TO_CONTINUE")" < /dev/tty
}

# H√†m ki·ªÉm tra v√† ƒë·ªÅ ngh·ªã c√†i ƒë·∫∑t g√≥i
check_and_install_pkg() {
    local pkg_name="$1"
    local tool_name="$2" # T√™n c√¥ng c·ª• ƒë·ªÉ hi·ªÉn th·ªã trong th√¥ng b√°o
    if ! command -v "$pkg_name" &> /dev/null && ! rpm -q "$pkg_name" &>/dev/null ; then # Check command and installed package
        local confirm_install
        printf "$(get_string "MSG_PKG_NOT_FOUND_INSTALL_PROMPT" "$tool_name")" # S·ª≠ d·ª•ng key m·ªõi
        read -r confirm_install < /dev/tty
        if [[ "$confirm_install" == "y" || "$confirm_install" == "Y" ]]; then
            printf "$(get_string "INFO_INSTALLING_PKG_FOR_TOOL" "$tool_name")\n" # S·ª≠ d·ª•ng key m·ªõi
            if sudo dnf install -y "$pkg_name"; then
                echo "‚úÖ $pkg_name installed successfully."
            else
                printf "$(get_string "ERR_PKG_INSTALL_FAILED_FOR_TOOL" "$tool_name")\n" # S·ª≠ d·ª•ng key m·ªõi
                return 1
            fi
        else
            return 1 # Ng∆∞·ªùi d√πng kh√¥ng mu·ªën c√†i
        fi
    fi
    return 0
}

# H√†m t·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
generate_password() {
    openssl rand -base64 16
}

# H√†m ch·∫°y l·ªánh WP-CLI cho m·ªôt trang c·ª• th·ªÉ
run_wp_cli() {
    local wp_path="$1"
    local wp_command="$2"
    local run_as_user="$WEB_USER" # Ch·∫°y v·ªõi ng∆∞·ªùi d√πng web server

    if [ ! -f "$wp_path/wp-config.php" ]; then
        printf "$(get_string "ERR_SITE_PATH_NOT_WP")\n" "$wp_path"
        return 1
    fi
    if ! command -v wp &> /dev/null; then
        echo "$(get_string "MSG_WPCLI_NOT_INSTALLED")"
        return 1
    fi

    echo "üîµ $(get_string "INFO_RUNNING_WPCLI_COMMAND" | sed "s/%s/$wp_path/1" | sed "s/%s/$wp_command/1")"
    # printf "$(get_string "INFO_RUNNING_WPCLI_COMMAND")\n" "$wp_path" "$wp_command" # This would print path and command on separate lines due to formatting
    # The above sed is a bit hacky for string replacement, ideally get_string would support parameters
    if sudo -u "$run_as_user" wp "$wp_command" --path="$wp_path" --allow-root; then # --allow-root for wp-cli if script is run as root
        echo "$(get_string "MSG_WPCLI_SUCCESS")"
        return 0
    else
        echo "$(get_string "MSG_WPCLI_FAIL")"
        return 1
    fi
}


# --- C√ÅC H√ÄM CH·ª®C NƒÇNG CH√çNH ---

# 1. C√†i ƒë·∫∑t LEMP Stack
install_lemp_stack() {
    echo "$(get_string "INFO_INSTALLING_LEMP")"
    local php_version_input
    local php_version="8.1" # M·∫∑c ƒë·ªãnh

    read -r -p "$(get_string "PROMPT_PHP_VERSION")" php_version_input < /dev/tty
    if [ -n "$php_version_input" ]; then
        php_version="$php_version_input"
    fi

    # C√†i ƒë·∫∑t Nginx
    if ! sudo dnf install -y nginx; then echo "‚ùå Nginx installation failed."; press_enter_to_continue; return 1; fi
    sudo systemctl enable --now nginx
    echo "$(get_string "INFO_NGINX_INSTALLED")"

    # C√†i ƒë·∫∑t MariaDB
    if ! sudo dnf install -y mariadb-server mariadb; then echo "‚ùå MariaDB installation failed."; press_enter_to_continue; return 1; fi
    sudo systemctl enable --now mariadb
    echo "$(get_string "INFO_MARIADB_INSTALLED")"
    echo "   $(get_string "MSG_PRESS_ENTER_TO_CONTINUE") $(get_string "EN_INFO_MARIADB_INSTALLED" | grep "mysql_secure_installation")" # Show mysql_secure_installation reminder
    # read -r temp < /dev/tty # Pause for user to see the mysql_secure_installation note

    # C√†i ƒë·∫∑t PHP v√† c√°c extensions c·∫ßn thi·∫øt
    # V√≠ d·ª•: sudo dnf module enable php:remi-8.1 -y (n·∫øu d√πng Remi repo)
    # Ho·∫∑c d√πng AppStream: sudo dnf module reset php -y; sudo dnf module enable php:${php_version} -y
    echo "   Installing PHP ${php_version} and extensions..."
    sudo dnf module reset php -y >/dev/null 2>&1
    if ! sudo dnf module enable php:"${php_version}" -y ; then
        echo "‚ùå Failed to enable PHP ${php_version} module. Please check available PHP versions with 'dnf module list php'."
        press_enter_to_continue
        return 1
    fi
    if ! sudo dnf install -y php php-fpm php-mysqlnd php-gd php-xml php-mbstring php-json php-opcache php-zip php-curl php-intl php-bcmath php-pecl-imagick; then
         echo "‚ùå PHP or some extensions installation failed."
         press_enter_to_continue
         return 1
    fi

    # C·∫•u h√¨nh PHP-FPM cho Nginx
    sudo sed -i 's/user = apache/user = nginx/g' /etc/php-fpm.d/www.conf
    sudo sed -i 's/group = apache/group = nginx/g' /etc/php-fpm.d/www.conf
    sudo sed -i 's/listen.owner = nobody/listen.owner = nginx/g' /etc/php-fpm.d/www.conf
    sudo sed -i 's/listen.group = nobody/listen.group = nginx/g' /etc/php-fpm.d/www.conf
    sudo systemctl enable --now php-fpm
    echo "$(get_string "INFO_PHP_INSTALLED")"

    # M·ªü port HTTP, HTTPS tr√™n firewall
    echo "   Opening HTTP and HTTPS ports on firewall..."
    sudo firewall-cmd --permanent --add-service=http >/dev/null 2>&1
    sudo firewall-cmd --permanent --add-service=https >/dev/null 2>&1
    sudo firewall-cmd --reload >/dev/null 2>&1

    echo "$(get_string "MSG_LEMP_INSTALL_SUCCESS")"
}

# 2. Qu·∫£n l√Ω WP-CLI
manage_wpcli() {
    while true; do
        clear
        echo "=============================================="
        echo "$(get_string "WPCLI_MENU_HEADER")"
        echo "=============================================="
        echo "$(get_string "WPCLI_OPT_INSTALL")"
        echo "$(get_string "WPCLI_OPT_CHECK_VERSION")"
        echo "$(get_string "WPCLI_OPT_UNINSTALL")"
        echo "$(get_string "WPCLI_OPT_BACK")"
        echo "=============================================="
        local choice
        read -r -p "$(get_string "PROMPT_ENTER_CHOICE")" choice < /dev/tty
        case $choice in
            1)
                echo "$(get_string "INFO_INSTALLING_WPCLI")"
                if curl -sO https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && \
                   chmod +x wp-cli.phar && \
                   sudo mv wp-cli.phar /usr/local/bin/wp; then
                    echo "$(get_string "MSG_WPCLI_INSTALL_SUCCESS")"
                    wp --info --allow-root
                else
                    echo "$(get_string "MSG_WPCLI_INSTALL_FAIL")"
                fi
                ;;
            2)
                if command -v wp &> /dev/null; then
                    wp --info --allow-root
                else
                    echo "$(get_string "MSG_WPCLI_NOT_INSTALLED")"
                fi
                ;;
            3)
                if command -v wp &> /dev/null; then
                    echo "$(get_string "INFO_UNINSTALLING_WPCLI")"
                    if sudo rm -f /usr/local/bin/wp; then
                         echo "$(get_string "MSG_WPCLI_UNINSTALL_SUCCESS")"
                    else
                         echo "$(get_string "MSG_WPCLI_UNINSTALL_FAIL")"
                    fi
                else
                    echo "$(get_string "MSG_WPCLI_NOT_INSTALLED")"
                fi
                ;;
            0) break ;;
            *) echo "$(get_string "ERR_INVALID_OPTION")" ;;
        esac
        press_enter_to_continue
    done
}


# 3. C√†i ƒë·∫∑t trang WordPress m·ªõi
install_new_wp_site() {
    local domain wp_path db_name db_user db_pass db_pass_final nginx_conf_file
    local salt_keys wp_salts

    echo "--- $(get_string "MENU_OPT_NEW_WP_SITE") ---"
    read -r -p "$(get_string "PROMPT_DOMAIN_NAME")" domain < /dev/tty
    if [ -z "$domain" ]; then echo "$(get_string "ERR_DOMAIN_EMPTY")"; return; fi

    read -r -p "$(get_string "PROMPT_WP_PATH")" wp_path < /dev/tty
    if [ -z "$wp_path" ]; then echo "$(get_string "ERR_WP_PATH_EMPTY")"; return; fi
    if [ -d "$wp_path" ]; then printf "$(get_string "ERR_WP_PATH_EXISTS")\n" "$wp_path"; return; fi

    read -r -p "$(get_string "PROMPT_DB_NAME")" db_name < /dev/tty
    if [ -z "$db_name" ]; then db_name="${domain//./_}_wp"; echo "‚ÑπÔ∏è DB Name defaulted to: $db_name"; fi # Default DB name

    read -r -p "$(get_string "PROMPT_DB_USER")" db_user < /dev/tty
    if [ -z "$db_user" ]; then db_user="${domain//./_}_usr"; echo "‚ÑπÔ∏è DB User defaulted to: $db_user"; fi # Default DB user (max 16 chars for MariaDB user)
    db_user=$(echo "$db_user" | cut -c 1-16)


    read -r -s -p "$(get_string "PROMPT_DB_PASS")" db_pass < /dev/tty
    echo "" # Newline after password input
    if [ -z "$db_pass" ]; then
        echo "$(get_string "INFO_GENERATING_DB_PASS")"
        db_pass_final=$(generate_password)
        printf "$(get_string "MSG_DB_PASS_GENERATED")\n" "$db_pass_final"
    else
        db_pass_final="$db_pass"
    fi

    # T·∫°o database v√† user
    echo "$(get_string "INFO_CREATING_DB" | sed "s/%s/$db_name/1" | sed "s/%s/$db_user/1")"
    # printf "$(get_string "INFO_CREATING_DB")\n" "$db_name" "$db_user" # This will print on two lines
    SQL_COMMAND="CREATE DATABASE IF NOT EXISTS \`$db_name\`; GRANT ALL PRIVILEGES ON \`$db_name\`.* TO \`$db_user\`@'localhost' IDENTIFIED BY '$db_pass_final'; FLUSH PRIVILEGES;"
    if sudo mysql -e "$SQL_COMMAND"; then
        echo "$(get_string "MSG_DB_CREATE_SUCCESS")"
    else
        echo "$(get_string "MSG_DB_CREATE_FAIL")"
        echo "   SQL executed: $SQL_COMMAND (password hidden)"
        press_enter_to_continue
        return 1
    fi

    # T·∫£i WordPress
    echo "$(get_string "INFO_DOWNLOADING_WP")"
    sudo mkdir -p "$wp_path"
    if sudo curl -sSL https://wordpress.org/latest.tar.gz -o "/tmp/latest.tar.gz" && \
       sudo tar -xzf "/tmp/latest.tar.gz" -C "$wp_path" --strip-components=1 && \
       sudo rm "/tmp/latest.tar.gz"; then
        echo "$(get_string "MSG_WP_DOWNLOAD_SUCCESS")"
    else
        echo "$(get_string "MSG_WP_DOWNLOAD_FAIL")"
        sudo rm -rf "$wp_path" # Clean up failed download
        press_enter_to_continue
        return 1
    fi

    # C·∫•u h√¨nh wp-config.php
    echo "$(get_string "INFO_CONFIGURING_WP")"
    sudo cp "$wp_path/wp-config-sample.php" "$wp_path/wp-config.php"
    # L·∫•y salt keys
    wp_salts=$(curl -sS https://api.wordpress.org/secret-key/1.1/salt/)
    if [ -n "$wp_salts" ]; then
        # X√≥a c√°c d√≤ng salt key m·∫´u
        sudo sed -i "/AUTH_KEY/d" "$wp_path/wp-config.php"
        sudo sed -i "/SECURE_AUTH_KEY/d" "$wp_path/wp-config.php"
        sudo sed -i "/LOGGED_IN_KEY/d" "$wp_path/wp-config.php"
        sudo sed -i "/NONCE_KEY/d" "$wp_path/wp-config.php"
        sudo sed -i "/AUTH_SALT/d" "$wp_path/wp-config.php"
        sudo sed -i "/SECURE_AUTH_SALT/d" "$wp_path/wp-config.php"
        sudo sed -i "/LOGGED_IN_SALT/d" "$wp_path/wp-config.php"
        sudo sed -i "/NONCE_SALT/d" "$wp_path/wp-config.php"
        # Ch√®n salt keys m·ªõi v√†o tr∆∞·ªõc d√≤ng `\$table_prefix`
        sudo sed -i "/\$table_prefix/i $wp_salts" "$wp_path/wp-config.php"
    else
        echo "‚ö†Ô∏è Could not fetch WordPress salts. Please add them manually to wp-config.php."
    fi

    sudo sed -i "s/database_name_here/$db_name/g" "$wp_path/wp-config.php"
    sudo sed -i "s/username_here/$db_user/g" "$wp_path/wp-config.php"
    sudo sed -i "s/password_here/$db_pass_final/g" "$wp_path/wp-config.php"
    # Th√™m FS_METHOD direct ƒë·ªÉ tr√°nh h·ªèi FTP credentials khi update/install plugin/theme
    echo "define('FS_METHOD', 'direct');" | sudo tee -a "$wp_path/wp-config.php" > /dev/null


    if [ $? -eq 0 ]; then
        echo "$(get_string "MSG_WP_CONFIG_SUCCESS")"
    else
        echo "$(get_string "MSG_WP_CONFIG_FAIL")"
        press_enter_to_continue
        return 1
    fi

    # Thi·∫øt l·∫≠p quy·ªÅn
    echo "$(get_string "INFO_SETTING_PERMISSIONS")"
    sudo chown -R "$WEB_USER":"$WEB_GROUP" "$wp_path"
    sudo find "$wp_path" -type d -exec chmod 755 {} \;
    sudo find "$wp_path" -type f -exec chmod 644 {} \;
    sudo chmod 640 "$wp_path/wp-config.php" # Harden wp-config.php

    # C·∫•u h√¨nh Nginx
    echo "$(get_string "INFO_CONFIGURING_NGINX" | sed "s/%s/$domain/g")"
    nginx_conf_file="/etc/nginx/conf.d/${domain}.conf"
    sudo bash -c "cat > $nginx_conf_file" <<EOF
server {
    listen 80;
    listen [::]:80;
    server_name $domain www.$domain;
    root $wp_path;

    index index.php index.html index.htm;

    location / {
        try_files \$uri \$uri/ /index.php?\$args;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass unix:/run/php-fpm/www.sock; # Ho·∫∑c TCP/IP n·∫øu PHP-FPM c·∫•u h√¨nh kh√°c
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_param PATH_INFO \$fastcgi_path_info;
    }

    location ~ /\.ht {
        deny all;
    }

    # Directives to send expires headers and turn off 404 error logging.
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 30d;
        log_not_found off;
    }
}
EOF
    if sudo nginx -t && sudo systemctl reload nginx; then
        echo "$(get_string "MSG_NGINX_CONFIG_SUCCESS" | sed "s/%s/$domain/g")"
    else
        echo "$(get_string "MSG_NGINX_CONFIG_FAIL" | sed "s/%s/$domain/g")"
        echo "   Please check Nginx configuration manually: sudo nginx -t"
        press_enter_to_continue
        # return 1 # Don't necessarily fail the whole WP install for this
    fi

    # Ho√†n t·∫•t
    server_ip=$(hostname -I | awk '{print $1}')
    echo ""
    echo "$(get_string "MSG_WP_INSTALL_COMPLETE_TITLE" | sed "s/%s/$domain/g")"
    echo "$(get_string "MSG_WP_INSTALL_COMPLETE_NEXT_STEPS")"
    echo "$(get_string "MSG_WP_INSTALL_COMPLETE_DNS" | sed "s/%s/$domain/1" | sed "s/%s/$server_ip/1")"
    echo "$(get_string "MSG_WP_INSTALL_COMPLETE_BROWSER" | sed "s/%s/$domain/g")"
    echo "$(get_string "MSG_WP_INSTALL_COMPLETE_SSL")"
}

# 4. Sao l∆∞u WordPress
backup_wp_site() {
    local site_path backup_dir timestamp db_name db_user db_pass wp_config_path db_backup_file files_backup_file

    echo "--- $(get_string "MENU_OPT_BACKUP_WP_SITE") ---"
    read -r -p "$(get_string "PROMPT_SITE_PATH_BACKUP")" site_path < /dev/tty
    wp_config_path="$site_path/wp-config.php"
    if [ ! -f "$wp_config_path" ]; then
        printf "$(get_string "ERR_SITE_PATH_NOT_WP")\n" "$site_path"
        return
    fi

    read -r -p "$(get_string "PROMPT_BACKUP_DIR")" backup_dir < /dev/tty
    if [ -z "$backup_dir" ]; then backup_dir="/var/backups/wordpress_$(basename "$site_path")"; fi
    sudo mkdir -p "$backup_dir"

    timestamp=$(date +"%Y%m%d_%H%M%S")

    # L·∫•y th√¥ng tin DB t·ª´ wp-config.php
    # C·∫ßn c·∫©n th·∫≠n v·ªõi c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát trong password
    db_name=$(sudo grep DB_NAME "$wp_config_path" | cut -d \' -f4)
    db_user=$(sudo grep DB_USER "$wp_config_path" | cut -d \' -f4)
    db_pass=$(sudo grep DB_PASSWORD "$wp_config_path" | cut -d \' -f4)


    # Sao l∆∞u database
    db_backup_file="$backup_dir/db_${db_name}_${timestamp}.sql.gz"
    printf "$(get_string "INFO_CREATING_BACKUP_DB")\n" "$site_path"
    if sudo mysqldump -u "$db_user" -p"$db_pass" "$db_name" | gzip > "$db_backup_file"; then
        echo "   ‚úÖ DB backup successful: $db_backup_file"
    else
        echo "   ‚ùå DB backup failed."
        # sudo rm -f "$db_backup_file" # X√≥a file r·ªóng n·∫øu l·ªói
        press_enter_to_continue
        return 1
    fi

    # Sao l∆∞u files
    files_backup_file="$backup_dir/files_$(basename "$site_path")_${timestamp}.tar.gz"
    printf "$(get_string "INFO_CREATING_BACKUP_FILES")\n" "$site_path"
    # -C ƒë·ªÉ thay ƒë·ªïi th∆∞ m·ª•c, gi√∫p lo·∫°i b·ªè ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi kh√¥ng c·∫ßn thi·∫øt trong tar
    if sudo tar -czf "$files_backup_file" -C "$(dirname "$site_path")" "$(basename "$site_path")"; then
        echo "   ‚úÖ Files backup successful: $files_backup_file"
    else
        echo "   ‚ùå Files backup failed."
        # sudo rm -f "$files_backup_file" # X√≥a file r·ªóng n·∫øu l·ªói
        press_enter_to_continue
        return 1
    fi
    printf "$(get_string "MSG_BACKUP_SUCCESS")\n" "$site_path" "$backup_dir"
}

# 5. Ph·ª•c h·ªìi WordPress
restore_wp_site() {
    local site_path files_backup db_backup db_name db_user db_pass wp_config_path tmp_db_name

    echo "--- $(get_string "MENU_OPT_RESTORE_WP_SITE") ---"
    read -r -p "$(get_string "PROMPT_SITE_PATH_RESTORE")" site_path < /dev/tty
    wp_config_path="$site_path/wp-config.php" # Gi·∫£ ƒë·ªãnh wp-config.php t·ªìn t·∫°i ho·∫∑c s·∫Ω ƒë∆∞·ª£c ph·ª•c h·ªìi

    read -r -p "$(get_string "PROMPT_BACKUP_FILE_FILES_RESTORE")" files_backup < /dev/tty
    if [ ! -f "$files_backup" ]; then echo "‚ùå Files backup '$files_backup' not found."; return; fi

    read -r -p "$(get_string "PROMPT_BACKUP_FILE_DB_RESTORE")" db_backup < /dev/tty
    if [ ! -f "$db_backup" ]; then echo "‚ùå DB backup '$db_backup' not found."; return; fi

    local confirm_restore
    printf "$(get_string "PROMPT_RESTORE_CONFIRM")\n" "$site_path"
    read -r confirm_restore < /dev/tty
    if [[ "$confirm_restore" != "y" && "$confirm_restore" != "Y" ]]; then
        echo "$(get_string "MSG_UNINSTALL_CANCELLED" | sed 's/Docker uninstallation/Restore operation/g')"; return
    fi

    # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
    sudo mkdir -p "$site_path"

    # Ph·ª•c h·ªìi files
    printf "$(get_string "INFO_RESTORING_FILES")\n" "$site_path"
    # X√≥a n·ªôi dung c≈© tr∆∞·ªõc khi gi·∫£i n√©n ƒë·ªÉ tr√°nh conflict, ho·∫∑c gi·∫£i n√©n v√†o th∆∞ m·ª•c t·∫°m r·ªìi di chuy·ªÉn
    # For simplicity, just extract, assuming user knows what they are doing or site_path is empty
    if sudo tar -xzf "$files_backup" -C "$site_path" --strip-components=1; then # Gi·∫£ s·ª≠ backup ƒë∆∞·ª£c t·∫°o v·ªõi --strip-components=1
        echo "   ‚úÖ Files restored."
        # C·∫ßn thi·∫øt l·∫≠p l·∫°i quy·ªÅn sau khi ph·ª•c h·ªìi
        sudo chown -R "$WEB_USER":"$WEB_GROUP" "$site_path"
        sudo find "$site_path" -type d -exec chmod 755 {} \;
        sudo find "$site_path" -type f -exec chmod 644 {} \;
        if [ -f "$wp_config_path" ]; then sudo chmod 640 "$wp_config_path"; fi
    else
        echo "   ‚ùå Files restoration failed."
        press_enter_to_continue
        return 1
    fi

    # Ph·ª•c h·ªìi database
    # L·∫•y th√¥ng tin DB t·ª´ wp-config.php (ƒë√£ ƒë∆∞·ª£c ph·ª•c h·ªìi t·ª´ backup files)
    if [ ! -f "$wp_config_path" ]; then
        echo "‚ùå wp-config.php not found in the restored files. Cannot proceed with DB restore without DB credentials."
        return 1
    fi
    db_name=$(sudo grep DB_NAME "$wp_config_path" | cut -d \' -f4)
    db_user=$(sudo grep DB_USER "$wp_config_path" | cut -d \' -f4)
    db_pass=$(sudo grep DB_PASSWORD "$wp_config_path" | cut -d \' -f4)

    if [ -z "$db_name" ] || [ -z "$db_user" ] || [ -z "$db_pass" ]; then
        echo "‚ùå Could not read DB credentials from restored wp-config.php. Cannot restore database."
        return 1
    fi

    printf "$(get_string "INFO_RESTORING_DB")\n"
    # Drop existing tables or drop and recreate database might be needed for a clean restore
    # For now, just import. User should ensure DB is clean or backup is designed for overwrite.
    # Check if DB exists, create if not (though wp-config has it, so it should exist or be created by user)
    sudo mysql -e "CREATE DATABASE IF NOT EXISTS \`$db_name\`;"

    local import_cmd
    if [[ "$db_backup" == *.gz ]]; then
        import_cmd="gzip -dc \"$db_backup\" | sudo mysql -u \"$db_user\" -p\"$db_pass\" \"$db_name\""
    else
        import_cmd="sudo mysql -u \"$db_user\" -p\"$db_pass\" \"$db_name\" < \"$db_backup\""
    fi

    if eval "$import_cmd"; then
        echo "   ‚úÖ Database restored."
    else
        echo "   ‚ùå Database restoration failed."
        press_enter_to_continue
        return 1
    fi

    printf "$(get_string "MSG_RESTORE_SUCCESS")\n" "$site_path"
}


# 6. C·∫≠p nh·∫≠t WordPress
update_wordpress_menu() {
    local site_path
    read -r -p "$(get_string "PROMPT_SITE_PATH_FOR_WPCLI")" site_path < /dev/tty
    if [ -z "$site_path" ]; then echo "$(get_string "ERR_WP_PATH_EMPTY")"; return; fi

    while true; do
        clear
        echo "=============================================="
        echo "$(get_string "UPDATE_WP_MENU_HEADER") - $site_path"
        echo "=============================================="
        echo "$(get_string "UPDATE_OPT_CORE")"
        echo "$(get_string "UPDATE_OPT_ALL_PLUGINS")"
        echo "$(get_string "UPDATE_OPT_ALL_THEMES")"
        echo "$(get_string "WPCLI_OPT_BACK")" # Re-use "Back" string
        echo "=============================================="
        local choice
        read -r -p "$(get_string "PROMPT_ENTER_CHOICE")" choice < /dev/tty

        case $choice in
            1) printf "$(get_string "INFO_UPDATING_WP_CORE")\n" "$site_path"; run_wp_cli "$site_path" "core update" ;;
            2) printf "$(get_string "INFO_UPDATING_ALL_PLUGINS")\n" "$site_path"; run_wp_cli "$site_path" "plugin update --all" ;;
            3) printf "$(get_string "INFO_UPDATING_ALL_THEMES")\n" "$site_path"; run_wp_cli "$site_path" "theme update --all" ;;
            0) break ;;
            *) echo "$(get_string "ERR_INVALID_OPTION")" ;;
        esac
        press_enter_to_continue
    done
}

# 7. Qu·∫£n l√Ω Maintenance Mode
manage_maintenance_mode() {
    local site_path action
    read -r -p "$(get_string "PROMPT_SITE_PATH_FOR_WPCLI")" site_path < /dev/tty
    if [ -z "$site_path" ]; then echo "$(get_string "ERR_WP_PATH_EMPTY")"; return; fi

    read -r -p "$(get_string "PROMPT_MAINTENANCE_ACTION")" action < /dev/tty
    case $action in
        1)
            printf "$(get_string "INFO_ENABLING_MAINTENANCE")\n" "$site_path"
            if run_wp_cli "$site_path" "maintenance-mode activate"; then
                echo "$(get_string "MSG_MAINTENANCE_ENABLED")"
            fi
            ;;
        2)
            printf "$(get_string "INFO_DISABLING_MAINTENANCE")\n" "$site_path"
            if run_wp_cli "$site_path" "maintenance-mode deactivate"; then
                echo "$(get_string "MSG_MAINTENANCE_DISABLED")"
            fi
            ;;
        *) echo "$(get_string "ERR_INVALID_OPTION")" ;;
    esac
}

# 8. Ch·∫°y l·ªánh WP-CLI t√πy ch·ªânh
run_custom_wpcli_command() {
    local site_path wp_cmd
    read -r -p "$(get_string "PROMPT_SITE_PATH_FOR_WPCLI")" site_path < /dev/tty
    if [ -z "$site_path" ]; then echo "$(get_string "ERR_WP_PATH_EMPTY")"; return; fi

    read -r -p "$(get_string "PROMPT_WPCLI_COMMAND")" wp_cmd < /dev/tty
    if [ -z "$wp_cmd" ]; then echo "$(get_string "ERR_CRON_ENTRY_EMPTY" | sed 's/Cron job entry/WP-CLI command/g')"; return; fi # Re-use

    run_wp_cli "$site_path" "$wp_cmd"
}

# 9. C√†i ƒë·∫∑t SSL v·ªõi Certbot
setup_ssl_certbot() {
    local domain email nginx_conf_path
    echo "--- $(get_string "MENU_OPT_SETUP_SSL") ---"

    if ! command -v certbot &> /dev/null; then
        echo "$(get_string "INFO_INSTALLING_CERTBOT")"
        if sudo dnf install -y certbot python3-certbot-nginx; then
            echo "$(get_string "MSG_CERTBOT_INSTALL_SUCCESS")"
        else
            echo "$(get_string "MSG_CERTBOT_INSTALL_FAIL")"
            return 1
        fi
    fi

    read -r -p "$(get_string "PROMPT_DOMAIN_FOR_SSL")" domain < /dev/tty
    if [ -z "$domain" ]; then echo "$(get_string "ERR_DOMAIN_EMPTY")"; return; fi

    nginx_conf_path="/etc/nginx/conf.d/${domain}.conf"
    if [ ! -f "$nginx_conf_path" ]; then
        echo "‚ö†Ô∏è Nginx config file $nginx_conf_path not found. Please install the WordPress site first or ensure the domain matches the Nginx config file name."
        return
    fi

    read -r -p "$(get_string "PROMPT_EMAIL_FOR_SSL")" email < /dev/tty
    if [ -z "$email" ]; then echo "‚ö†Ô∏è Email cannot be empty for Let's Encrypt."; return; fi


    echo "$(get_string "INFO_REQUESTING_SSL_CERT" | sed "s/%s/$domain/g")"
    # Certbot command might need adjustment based on Nginx config.
    # --nginx attempts to auto-configure Nginx.
    # --agree-tos and -n for non-interactive (but email is required for -n with register-unsafely-without-email)
    # We make it interactive for TOS.
    if sudo certbot --nginx -d "$domain" -d "www.$domain" --email "$email" --agree-tos --no-eff-email --redirect; then
        echo "$(get_string "MSG_SSL_SETUP_SUCCESS" | sed "s/%s/$domain/g")"
        echo "   Testing Nginx configuration..."
        if sudo nginx -t; then
            sudo systemctl reload nginx
            echo "   ‚úÖ Nginx reloaded."
        else
            echo "   ‚ùå Nginx configuration test failed after SSL setup. Please check manually."
        fi
    else
        echo "$(get_string "MSG_SSL_SETUP_FAIL" | sed "s/%s/$domain/g")"
    fi
}

# 10. X√≥a trang WordPress
delete_wp_site() {
    local site_path domain db_name db_user wp_config_path confirm_dangerous

    echo "--- $(get_string "MENU_OPT_DELETE_WP_SITE") ---"
    read -r -p "$(get_string "PROMPT_SITE_PATH_DELETE")" site_path < /dev/tty
    if [ -z "$site_path" ] || [ ! -d "$site_path" ]; then
        echo "‚ö†Ô∏è Site path is empty or does not exist: $site_path"; return
    fi
    wp_config_path="$site_path/wp-config.php"

    printf "$(get_string "PROMPT_DELETE_WP_CONFIRM1")\n" "$site_path"
    echo "$(get_string "PROMPT_DELETE_WP_CONFIRM2")"
    read -r -p "$(get_string "PROMPT_DELETE_WP_CONFIRM3")" confirm_dangerous < /dev/tty

    if [ "$confirm_dangerous" != "YESIDOITTODELETE" ]; then
        echo "$(get_string "MSG_WP_DELETE_ABORTED")"
        return
    fi

    # L·∫•y th√¥ng tin DB t·ª´ wp-config.php tr∆∞·ªõc khi x√≥a
    if [ -f "$wp_config_path" ]; then
        db_name=$(sudo grep DB_NAME "$wp_config_path" | cut -d \' -f4)
        db_user=$(sudo grep DB_USER "$wp_config_path" | cut -d \' -f4)
        # Domain might be derivable from path or Nginx config if needed later for Nginx conf removal
        domain=$(basename "$site_path") # Simple assumption
        if [[ "$site_path" == *"/var/www/"* ]]; then # Try to get domain from path if it's /var/www/domain
            domain=$(echo "$site_path" | sed 's|/var/www/||' | cut -d'/' -f1)
        fi
    else
        echo "‚ö†Ô∏è wp-config.php not found at $site_path. Cannot determine DB details for deletion automatically. Skipping DB/User deletion."
        db_name=""
        db_user=""
        domain=$(basename "$site_path") # Fallback for Nginx config name
    fi


    printf "$(get_string "INFO_DELETING_WP_FILES")\n" "$site_path"
    sudo rm -rf "$site_path"

    local nginx_conf_file="/etc/nginx/conf.d/${domain}.conf"
    if [ -f "$nginx_conf_file" ]; then
        echo "$(get_string "INFO_DELETING_NGINX_CONF")"
        sudo rm -f "$nginx_conf_file"
        sudo nginx -t && sudo systemctl reload nginx
    else
        echo "‚ÑπÔ∏è Nginx config file for $domain ($nginx_conf_file) not found, skipping."
    fi

    if [ -n "$db_name" ] && [ -n "$db_user" ]; then
        printf "$(get_string "INFO_DELETING_DB_USER")\n" "$db_name" "$db_user"
        SQL_COMMAND_DELETE="DROP DATABASE IF EXISTS \`$db_name\`; DROP USER IF EXISTS \`$db_user\`@'localhost'; FLUSH PRIVILEGES;"
        if sudo mysql -e "$SQL_COMMAND_DELETE"; then
             echo "   ‚úÖ Database '$db_name' and user '$db_user' deleted."
        else
             echo "   ‚ö†Ô∏è Failed to delete database '$db_name' or user '$db_user'. Please check manually."
        fi
    fi
    printf "$(get_string "MSG_WP_DELETE_COMPLETE")\n" "$site_path"
}


# --- MENU CH√çNH ---
main_menu() {
    while true; do
        clear
        echo "=============================================="
        echo "$(get_string "MAIN_MENU_HEADER")"
        echo "=============================================="
        echo "$(get_string "MENU_OPT_LEMP_SETUP")"
        echo "$(get_string "MENU_OPT_WPCLI_MGMT")"
        echo "$(get_string "MENU_OPT_NEW_WP_SITE")"
        echo "$(get_string "MENU_OPT_BACKUP_WP_SITE")"
        echo "$(get_string "MENU_OPT_RESTORE_WP_SITE")"
        echo "$(get_string "MENU_OPT_UPDATE_WP")"
        echo "$(get_string "MENU_OPT_MAINTENANCE_MODE")"
        echo "$(get_string "MENU_OPT_RUN_WPCLI_CMD")"
        echo "$(get_string "MENU_OPT_SETUP_SSL")"
        echo "$(get_string "MENU_OPT_DELETE_WP_SITE")"
        echo ""
        echo "$(get_string "MENU_OPT_EXIT")"
        echo "=============================================="
        local choice
        read -r -p "$(get_string "PROMPT_ENTER_CHOICE")" choice < /dev/tty

        case $choice in
            1) install_lemp_stack ;;
            2) manage_wpcli ;;
            3) install_new_wp_site ;;
            4) backup_wp_site ;;
            5) restore_wp_site ;;
            6) update_wordpress_menu ;;
            7) manage_maintenance_mode ;;
            8) run_custom_wpcli_command ;;
            9) setup_ssl_certbot ;;
            10) delete_wp_site ;;
            0) echo "$(get_string "MSG_EXITING")"; exit 0 ;;
            *) echo "$(get_string "ERR_INVALID_OPTION")" ;;
        esac
        press_enter_to_continue
    done
}

# --- B·∫ÆT ƒê·∫¶U K·ªäCH B·∫¢N ---
main_menu